<#@ template debug="True" language="C#"  #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Web" #>
<#@output extension=".sql"#>
<#@ import namespace="SFSdotNet.VSAddin2015.Model" #> 
<#@ import namespace="SFSdotNet.VSAddin2015.Model.Utils" #> 
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Linq" #>
<#@ dom processor="SFSEdmxProcessor"  
requires="EntityModel='SFSServiceDeskModel.edmx'" #>
<#  
	string prefix = (String)GetCustomProperty(this.Model, "EntityPrefix", "String");
	
	string companyProperty = (String)GetCustomProperty(this.Model, "CompanyProperty", "String");
	string createdDateProperty = (String)GetCustomProperty(this.Model, "AutoCreatedDateProperty", "String");
	string updatedDateProperty = (String)GetCustomProperty(this.Model, "AutoUpdatedDateProperty", "String");
	string createdByProperty = (String)GetCustomProperty(this.Model, "AutoCreatedUserProperty", "String");
	string updatedByProperty = (String)GetCustomProperty(this.Model, "AutoUpdatedUserProperty", "String");
	bool addCompanyProperty = true;
	bool addDeletedProperty = true ;
	bool preventAddCompanyProperty = (Boolean)GetCustomProperty(this.Model, "PreventAddCompanyProperty", "Boolean");
	//PreventDeletedProperty
	bool preventDeletedProperty = (Boolean)GetCustomProperty(this.Model, "PreventDeletedProperty", "Boolean");
	if (preventDeletedProperty == true ){
		addDeletedProperty = false;
    }
	if (preventAddCompanyProperty == true ){
		addCompanyProperty = false;
    }
	string deletedProperty = "IsDeleted";
	string bytesProperty = (String)GetCustomProperty(this.Model, "AutoSizeBytesProperty", "String");

	string reusableCatalogName = (String)GetCustomProperty(this.Model, "ReusableCatalog", "String");
	foreach(EntityInfo entity in this.Model.Entities.Where(p=> p.Name.Contains(reusableCatalogName) == false && p.Name.Contains("Proxy") == false  )) {
		string sqlTableName = (String)GetCustomProperty(entity, "SqlTableName", "String");
		if (string.IsNullOrEmpty(sqlTableName)){
			sqlTableName = entity.Name;
        }

#>
PRINT 'Table <#= sqlTableName #>, entity <#= entity.Name #>'
<# if (addCompanyProperty == true ){ #>
-- <#= companyProperty #>
if COLUMNPROPERTY(OBJECT_ID(N'<#= prefix #>.<#= sqlTableName #>', N'U'),'<#= companyProperty #>','ColumnId') is null
begin 
  alter table <#= prefix #>.<#= sqlTableName #> 
  add <#= companyProperty #> uniqueidentifier null 
end
GO
<#  } #>
-- <#= createdDateProperty #>
if COLUMNPROPERTY(OBJECT_ID(N'<#= prefix #>.<#= sqlTableName #>', N'U'),'<#= createdDateProperty #>','ColumnId') is null
begin 
  alter table <#= prefix #>.<#= sqlTableName #> 
  add <#= createdDateProperty #> DATETIME null 
end
GO
-- <#= updatedDateProperty #>
if COLUMNPROPERTY(OBJECT_ID(N'<#= prefix #>.<#= sqlTableName #>', N'U'),'<#= updatedDateProperty #>','ColumnId') is null
begin 
  alter table <#= prefix #>.<#= sqlTableName #> 
  add <#= updatedDateProperty #> DATETIME null 
end
GO
-- <#= createdByProperty #>
if COLUMNPROPERTY(OBJECT_ID(N'<#= prefix #>.<#= sqlTableName #>', N'U'),'<#= createdByProperty #>','ColumnId') is null
begin 
  alter table <#= prefix #>.<#= sqlTableName #> 
  add <#= createdByProperty #> uniqueidentifier null 
end
GO
-- <#= updatedByProperty #>
if COLUMNPROPERTY(OBJECT_ID(N'<#= prefix #>.<#= sqlTableName #>', N'U'),'<#= updatedByProperty #>','ColumnId') is null
begin 
  alter table <#= prefix #>.<#= sqlTableName #> 
  add <#= updatedByProperty #> uniqueidentifier null 
end
GO

-- <#= bytesProperty #>
if COLUMNPROPERTY(OBJECT_ID(N'<#= prefix #>.<#= sqlTableName #>', N'U'),'<#= bytesProperty #>','ColumnId') is null
begin 
  alter table <#= prefix #>.<#= sqlTableName #> 
  add <#= bytesProperty #> [int] null 
end
GO

<# if (addDeletedProperty == true ) { #>
-- <#= deletedProperty #>
if COLUMNPROPERTY(OBJECT_ID(N'<#= prefix #>.<#= sqlTableName #>', N'U'),'<#= deletedProperty #>','ColumnId') is null
begin 
  alter table <#= prefix #>.<#= sqlTableName #> 
  add <#= deletedProperty #> [bit] null DEFAULT ('false') 
end
GO
<# } #>
<#    }#>

<#+ 
public object GetCustomProperty(EntityInfo entity, string customPropertyName, string propertyType){
	object result = null;
		if (propertyType.ToLower() =="boolean")
			result = false;
		else if(propertyType.ToLower() == "string")
			result = "";
		//Write(property.CustomProperties.Count().ToString());

		CustomPropertyInfo cp = entity.CustomProperties.FirstOrDefault(p=>p.Name == customPropertyName);
		if (cp!= null ){
			//Write(cp.Value);
			if(propertyType.ToLower() == "boolean")	
				result = Convert.ToBoolean(cp.Value);
			else if(propertyType.ToLower() == "string")
				result = Convert.ToString(cp.Value);
			else
				result = Convert.ToString(cp.Value);
		}		
		
	
		return result;
}
public object GetCustomProperty(ModelInfo model, string customPropertyName, string propertyType){
	object result = null;
		if (propertyType.ToLower() =="boolean")
			result = false;
		else if(propertyType.ToLower() == "string")
			result = "";
		

		CustomPropertyInfo cp = model.CustomProperties.FirstOrDefault(p=>p.Name == customPropertyName);
		if (cp!= null ){
			//Write(cp.Value);
			if(propertyType.ToLower() == "boolean")	
				result = Convert.ToBoolean(cp.Value);
			else if(propertyType.ToLower() == "string")
				result = Convert.ToString(cp.Value);
			else
				result = Convert.ToString(cp.Value);
		}		
		
	
		return result;
}
 #>

