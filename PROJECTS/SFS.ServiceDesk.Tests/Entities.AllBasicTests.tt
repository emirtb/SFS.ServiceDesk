<#@ template debug="True" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Web" #>
<#@ import namespace="SFSdotNet.VSAddin2015.Model" #> 
<#@ import namespace="SFSdotNet.VSAddin2015.Model.Utils" #> 
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Linq" #>
<#@ dom processor="SFSEdmxProcessor"  
requires="EntityModel='SFSServiceDeskModel.edmx'"  #>

#region using
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using <#= Model.Namespace #>.Client.Models;

using System.Configuration;
using System.Collections.Generic;

#endregion
namespace <#= Model.Namespace #>.Tests
{

	 [TestClass]
	  public class AllBasicTests
	  {
	    private string url = null;
        public AllBasicTests()
        {
            url = ConfigurationManager.AppSettings["urlApp"];
        }
		private ApiWrapper<TModel> GetWrapper<TModel>() where TModel:class 
        {
            
            ApiWrapper<TModel> apiWrapper = new ApiWrapper<TModel>();
            apiWrapper.Username = ConfigurationManager.AppSettings["username"];
            apiWrapper.Password = ConfigurationManager.AppSettings["password"];
            apiWrapper.CompanyId = ConfigurationManager.AppSettings["companyId"];
            return apiWrapper;
        }
<# 
	List<EntityInfo> entityOrdered = new List<EntityInfo>();
	foreach(EntityInfo entity in this.Model.Entities.Where(p=> p.Properties.Count(x=> x.IsNavigationProperty == true && x.IsNavigationPropertyMany == false) == 0).ToList()) {
		entityOrdered.Add(entity);
    }
	foreach(EntityInfo entity in this.Model.Entities.Where(p=> p.Properties.Count(x=> x.IsNavigationProperty == true && x.IsNavigationPropertyMany == false) > 0).ToList()) {
        foreach (var propFk in entity.Properties.Where(p=> p.IsNavigationProperty == true && p.IsNavigationPropertyMany == false ))
        {
			var navprop = entity.NavigationProperties.FirstOrDefault(p=>p.PropertyName== propFk.Name);
			var entityRelName = navprop.EntityType.Split(char.Parse("."))[navprop.EntityType.Split(char.Parse(".")).Length -1];
			var entityRel = entity.Model.Entities.FirstOrDefault(p=>p.Name == entityRelName);
			if (entityRel != null ){
				if (!entityOrdered.Contains(entityRel)){
					entityOrdered.Add(entityRel);
                }

            }
		}
		if (!entityOrdered.Contains(entity)){
			entityOrdered.Add(entity);
		}
	}

	foreach(EntityInfo entity in entityOrdered) {
	PropertyInfo propertyKey = entity.Properties.FirstOrDefault(p=> p.IsPrimaryKey == true );

	#>
	public <#= entity.Name #> <#= entity.Name #>Sample(){
		 <#= entity.Name #> item = new <#= entity.Name #>();
<# foreach(PropertyInfo property in entity.Properties.Where(p=> p.Type.ToLower().Contains("guid")  || p.Type.ToLower().Contains("string") || p.Type.ToLower().Contains("int32") || p.Type.ToLower().Contains("int64") || p.Type.ToLower().Contains("bool") || p.Type.ToLower().Contains("decimal") || p.Type.ToLower().Contains("datetime") )) { #>
<#	if (property.IsPrimaryKey == true ){ #>
            item.<#= property.Name #> = Guid.NewGuid();
<#	}else if (property.Name.ToLower() != "isdeleted" && property.Name.ToLower() != "createddate" && property.Name.ToLower() != "updateddate" && property.Name.ToLower() != "bytes" ){ 
		if (property.Type.ToLower().Contains("string")){	
		var size = property.MaxLength;
		if (size == 0)
		{
			size = 10;
		}else if (size > 10){
			size = 10;
		}else if (size < 10 ){
		
		}
		#>
            item.<#= property.Name #> = Utils.GetString(<#=size#>);
<#		}else if (property.Type.ToLower().Contains("datetime")) { #>
            item.<#= property.Name #> = Utils.GetDateTime();
			
<#		}else if (property.Type.ToLower().Contains("decimal")) { #>
            item.<#= property.Name #> = Utils.GetDecimal();

<#		}else if (property.Type.ToLower().Contains("int")) { #>
            item.<#= property.Name #> = Utils.GetInt();

<#		}else if (property.Type.ToLower().Contains("bool")) { #>

            item.<#= property.Name #> = Utils.GetBool();
<#		} #>
<#	} #>

<# } #>
		return item;
	}
 [TestMethod]
  public void  <#= entity.Name #>Create()
  {
            this. <#= entity.Name #>Create(null, null);
   }

	[TestMethod]
	 public void <#= entity.Name #>Create( List<<#= entity.Name #>> items, <#= entity.Name #> item )
        {
            var apiWrapper = GetWrapper<<#= entity.Name #>>();
            apiWrapper.EntityKeyName = "<#= entity.Name #>";
            apiWrapper.EntitySetName  = "<#= entity.SetName #>";
			if (item == null && items == null)
            {
				apiWrapper.Item = <#= entity.Name #>Sample();
			}else{
				apiWrapper.Item = item;
                apiWrapper.Items = items;
			}
            var resultCreate  = Services.ApiCreate(url, apiWrapper);
			Assert.IsTrue(resultCreate == "ok");
			if (apiWrapper.Item != null)
            {
				apiWrapper.ItemKey = apiWrapper.Item.<#= propertyKey.Name #>;
				var existent = Services.ApiGetByKey<<#= entity.Name #>>(url, apiWrapper);
				Assert.IsNotNull(existent);
			}
            
        }
<# } #>
	  }
}
<#+
public string PrepareLinqExpression(string originalValue){
	string result = originalValue;
	if (originalValue.Contains("[NotDeleted]") || originalValue.Contains("[AND]")){
		result = result.Replace("[NotDeleted]", "deleted => deleted.IsDeleted != true || deleted.IsDeleted == null");
		result = result.Replace("[AND]", "&&");
		result = result.Replace("[Quote]", "\"");
	}

	return result;
}

public string NullableSymbol(PropertyInfo property){
			string result = "";
			if (property.Nullable){
	string pname = property.NetType.Split(char.Parse("."))[property.NetType.Split(char.Parse(".")).Length - 1 ];
	
	
		if (!property.Type.Contains("ICollection")  && !property.Type.ToLower().Contains("string") && !property.Type.ToLower().Contains("xml") && property.Entity.Model.Entities.Count(p=>p.Name == pname) == 0 ) {
			if (!property.Type.Contains("ICollection")  && property.Type != "String" && property.Type != "Binary" && property.IsPrimaryKey== false){
				if (property.Nullable)
				{
					result = "?";
				}
			}else if (property.IsPrimaryKey && property.Type != "String"){
				result = "?";
			}
		}else if (property.IsPrimaryKey && property.Type != "String" && property.Type != "DateTime"){
			result = "?";
		}
            }
		return result;
	}
public object GetCustomProperty(EntityInfo entity, string customPropertyName, string propertyType){
	object result = null;
		if (propertyType.ToLower() =="boolean")
			result = false;
		else if(propertyType.ToLower() == "string")
			result = "";
		//Write(property.CustomProperties.Count().ToString());

		CustomPropertyInfo cp = entity.CustomProperties.FirstOrDefault(p=>p.Name == customPropertyName);
		if (cp!= null ){
			//Write(cp.Value);
			if(propertyType.ToLower() == "boolean")	
				result = Convert.ToBoolean(cp.Value);
			else if(propertyType.ToLower() == "string")
				result = Convert.ToString(cp.Value);
			else
				result = Convert.ToString(cp.Value);
		}		
		
	
		return result;
}
public object GetCustomProperty(ModelInfo model, string customPropertyName, string propertyType){
	object result = null;
		if (propertyType.ToLower() =="boolean")
			result = false;
		else if(propertyType.ToLower() == "string")
			result = "";
		

		CustomPropertyInfo cp = model.CustomProperties.FirstOrDefault(p=>p.Name == customPropertyName);
		if (cp!= null ){
			//Write(cp.Value);
			if(propertyType.ToLower() == "boolean")	
				result = Convert.ToBoolean(cp.Value);
			else if(propertyType.ToLower() == "string")
				result = Convert.ToString(cp.Value);
			else
				result = Convert.ToString(cp.Value);
		}		
		
	
		return result;
}
public bool IsPropertyForBusinessObject(PropertyInfo property){
	bool result = true;

		/*if (
			(property.Type.ToLower() == "string" 
			|| property.Type.ToLower() == "int"
			|| property.Type.ToLower() == "guid"
			|| property.Type.ToLower() == "int16"
			|| property.Type.ToLower() == "int32"
			|| property.Type.ToLower() == "datetime" 
			|| property.Type.ToLower() == "timespan" 
			|| property.Type.ToLower() == "double"
			|| property.Type.ToLower() == "decimal"
			|| property.Type.ToLower() == "smallint" 
			|| property.Type.ToLower() == "boolean" 
			|| property.Type.ToLower() == "string" 
			|| property.Type.ToLower() == "byte[]"
			|| property.Type.ToLower() == "binary" 
			|| property.Type.ToLower() == "bit" ) 
			|| 
			( property.Type.ToLower() != "captcha")){
			result = true;
		}*/
	return result;
}
public object GetCustomProperty(PropertyInfo property, string customPropertyName, string propertyType){
		
		object result = null;
		if (propertyType.ToLower() =="boolean")
			result = false;
		else if(propertyType.ToLower() == "string")
			result = "";
		else if (propertyType.ToLower() == "int?")
			result = null;
		//Write(property.CustomProperties.Count().ToString());

		CustomPropertyInfo cp = property.CustomProperties.FirstOrDefault(p=>p.Name == customPropertyName);
		if (cp!= null ){
			//Write(cp.Value);
			if(propertyType.ToLower() == "boolean")	
				result = Convert.ToBoolean(cp.Value);
			else if(propertyType.ToLower() == "string")
				result = Convert.ToString(cp.Value);
			else if(propertyType.ToLower() == "int?")
				result = Convert.ToInt32(cp.Value);
			else
				result = Convert.ToString(cp.Value);
		}		
		
	
		return result;
		
}
#>
