<#@ template debug="True" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Web" #>
<#@ import namespace="SFSdotNet.VSAddin2015.Model" #> 
<#@ import namespace="SFSdotNet.VSAddin2015.Model.Utils" #> 
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Linq" #>
<#@ dom processor="SFSEdmxProcessor"  
requires="EntityModel='SFSServiceDeskModel.edmx'"  #>

#region using
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
//using SFSdotNet.Framework.Common.Entities.Metadata;
//using SFSdotNet.Framework.Common.Entities;

//using Repository.Pattern.Ef6;
#endregion
namespace <#= Model.Namespace #>.Client.Models
{

<#    foreach(EntityInfo entity in this.Model.Entities) {
	#>

	  [Serializable()]
	  public partial class <#=entity.Name#>{
<#	foreach(PropertyInfo property in entity.Properties) {
		if (property.IsPrimaryKey ){
#>
public <#= property.NetType.Split(char.Parse("."))[property.NetType.Split(char.Parse(".")).Length - 1 ] #>? <#=property.Name#> { get; set; }		

<#
        }else if (property.IsNavigationPropertyMany == true ){
 #>			
public List<<#= property.NetType.Split(char.Parse("."))[property.NetType.Split(char.Parse(".")).Length - 1 ] #>> <#= NullableSymbol(property) #> <#=property.Name#> { get; set; }		
		
 <#
        }else{
 #>			


public <#= property.NetType.Split(char.Parse("."))[property.NetType.Split(char.Parse(".")).Length - 1 ] #><#= NullableSymbol(property) #> <#=property.Name#> { get; set; }		
		
<#		}
	} #>
	  }
<# } #>	
}
<#+
public string PrepareLinqExpression(string originalValue){
	string result = originalValue;
	if (originalValue.Contains("[NotDeleted]") || originalValue.Contains("[AND]")){
		result = result.Replace("[NotDeleted]", "deleted => deleted.IsDeleted != true || deleted.IsDeleted == null");
		result = result.Replace("[AND]", "&&");
		result = result.Replace("[Quote]", "\"");
	}

	return result;
}

public string NullableSymbol(PropertyInfo property){
			string result = "";
			if (property.Nullable){
	string pname = property.NetType.Split(char.Parse("."))[property.NetType.Split(char.Parse(".")).Length - 1 ];
	
	
		if (!property.Type.Contains("ICollection")  && !property.Type.ToLower().Contains("string") && !property.Type.ToLower().Contains("xml") && property.Entity.Model.Entities.Count(p=>p.Name == pname) == 0 ) {
			if (!property.Type.Contains("ICollection")  && property.Type != "String" && property.Type != "Binary" && property.IsPrimaryKey== false){
				if (property.Nullable)
				{
					result = "?";
				}
			}else if (property.IsPrimaryKey && property.Type != "String"){
				result = "?";
			}
		}else if (property.IsPrimaryKey && property.Type != "String" && property.Type != "DateTime"){
			result = "?";
		}
            }
		return result;
	}
public object GetCustomProperty(EntityInfo entity, string customPropertyName, string propertyType){
	object result = null;
		if (propertyType.ToLower() =="boolean")
			result = false;
		else if(propertyType.ToLower() == "string")
			result = "";
		//Write(property.CustomProperties.Count().ToString());

		CustomPropertyInfo cp = entity.CustomProperties.FirstOrDefault(p=>p.Name == customPropertyName);
		if (cp!= null ){
			//Write(cp.Value);
			if(propertyType.ToLower() == "boolean")	
				result = Convert.ToBoolean(cp.Value);
			else if(propertyType.ToLower() == "string")
				result = Convert.ToString(cp.Value);
			else
				result = Convert.ToString(cp.Value);
		}		
		
	
		return result;
}
public object GetCustomProperty(ModelInfo model, string customPropertyName, string propertyType){
	object result = null;
		if (propertyType.ToLower() =="boolean")
			result = false;
		else if(propertyType.ToLower() == "string")
			result = "";
		

		CustomPropertyInfo cp = model.CustomProperties.FirstOrDefault(p=>p.Name == customPropertyName);
		if (cp!= null ){
			//Write(cp.Value);
			if(propertyType.ToLower() == "boolean")	
				result = Convert.ToBoolean(cp.Value);
			else if(propertyType.ToLower() == "string")
				result = Convert.ToString(cp.Value);
			else
				result = Convert.ToString(cp.Value);
		}		
		
	
		return result;
}
public bool IsPropertyForBusinessObject(PropertyInfo property){
	bool result = true;

		/*if (
			(property.Type.ToLower() == "string" 
			|| property.Type.ToLower() == "int"
			|| property.Type.ToLower() == "guid"
			|| property.Type.ToLower() == "int16"
			|| property.Type.ToLower() == "int32"
			|| property.Type.ToLower() == "datetime" 
			|| property.Type.ToLower() == "timespan" 
			|| property.Type.ToLower() == "double"
			|| property.Type.ToLower() == "decimal"
			|| property.Type.ToLower() == "smallint" 
			|| property.Type.ToLower() == "boolean" 
			|| property.Type.ToLower() == "string" 
			|| property.Type.ToLower() == "byte[]"
			|| property.Type.ToLower() == "binary" 
			|| property.Type.ToLower() == "bit" ) 
			|| 
			( property.Type.ToLower() != "captcha")){
			result = true;
		}*/
	return result;
}
public object GetCustomProperty(PropertyInfo property, string customPropertyName, string propertyType){
		
		object result = null;
		if (propertyType.ToLower() =="boolean")
			result = false;
		else if(propertyType.ToLower() == "string")
			result = "";
		else if (propertyType.ToLower() == "int?")
			result = null;
		//Write(property.CustomProperties.Count().ToString());

		CustomPropertyInfo cp = property.CustomProperties.FirstOrDefault(p=>p.Name == customPropertyName);
		if (cp!= null ){
			//Write(cp.Value);
			if(propertyType.ToLower() == "boolean")	
				result = Convert.ToBoolean(cp.Value);
			else if(propertyType.ToLower() == "string")
				result = Convert.ToString(cp.Value);
			else if(propertyType.ToLower() == "int?")
				result = Convert.ToInt32(cp.Value);
			else
				result = Convert.ToString(cp.Value);
		}		
		
	
		return result;
		
}
#>
