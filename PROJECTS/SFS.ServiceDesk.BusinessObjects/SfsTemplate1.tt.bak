<#@ template debug="True" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Web" #>
<#@ import namespace="SFSdotNet.VSAddin2012.Model" #> 
<#@ import namespace="SFSdotNet.VSAddin2012.Model.Utils" #> 
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Linq" #>
<#@ dom processor="SFSEdmxProcessor"  
requires="EntityModel='SFSAgroMxModel.edmx'"  #>
// <Template>
//   <SolutionTemplate>EF POCO 1</SolutionTemplate>
//   <Version>20140822.0944</Version>
//   <Update>Metadata de identificador</Update>
// </Template>
#region using
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using SFSdotNet.Framework.Entities.Metadata;
using SFSdotNet.Framework.Entities;
#endregion
namespace <#= Model.Namespace #>.BusinessObjects
{

<#    foreach(EntityInfo entity in this.Model.Entities) {
	try{
	#>
<#
	System.Text.StringBuilder keyParams = new System.Text.StringBuilder();
	PropertyInfo propertyID = null;
	foreach(PropertyKeyInfo propertyKey in entity.EntityKey){
		
			if(keyParams.Length > 0) keyParams.Append(", ");
			keyParams.Append(propertyKey.Property.Type + " " + Code.CamelCase(propertyKey.PropertyName));
			propertyID = propertyKey.Property;
	}
#>
	  [Serializable()]
<# if (propertyID != null ) { #>
	  [EntityInfo(PropertyKeyName="<#= propertyID.Name #>")]
<# } #>
	  public partial class <#=entity.Name#>: IMyEntity{
			public SFSdotNet.Framework.GlobalObjects.UserInfo CreatedByUser { get; set; }

			public override string ToString()
            {
<# 			if (!string.IsNullOrEmpty(entity.DefaultProperty)) { #>			
            	return this.<#= entity.DefaultProperty #>.ToString();
<# 			}else{ #>				
				return base.ToString();
<# 			} #>
			}

		//public <#= entity.Name #>()
        //  {

        //  }

	  #region Composite Key
	   public string Key { 
                  get {
                      StringBuilder sb = new StringBuilder();
<#  	int nkeys =0;
		foreach (var property in entity.Properties.Where(p=>p.IsPrimaryKey)) {
			nkeys ++;#>
<# 			if (nkeys > 1) { #>
						sb.Append("|");
<# 			} #>
<# 					if (property.Nullable) { #>
					  if (<#= property.Name #> != null)
<# 					} #>					sb.Append(this.<#= property.Name #>.ToString());
<# 	} #>
                      return sb.ToString();
                } 
		}
        [Serializable()]
        [DataContract]
        public class CompositeKey {

			
            public CompositeKey(<#=keyParams.ToString()#>)
            {
<#
		foreach(PropertyKeyInfo propertyKey in entity.EntityKey){
#>
				_<#=propertyKey.PropertyName#> = <#=Code.CamelCase(propertyKey.PropertyName)#>;
<#			
		}
#>

            }
<#
		foreach(PropertyKeyInfo propertyKey in entity.EntityKey){
#>
			private <#=propertyKey.Property.Type#> _<#=propertyKey.PropertyName#>;
			[DataMember]
			public <#=propertyKey.Property.Type#> <#=propertyKey.PropertyName#>
			{
				get{
					return _<#=propertyKey.PropertyName#>;
				}
				set{
                     
					_<#=propertyKey.PropertyName #> = value;
				}
	        }

<#			
		}
#>
            
        }
        #endregion
        
<# foreach(PropertyInfo property in entity.Properties.Where(p=>p.Type.ToLower() != "include" && p.IsCustom == true && p.Entity.IsCustom==false)) { 
		string nullable = NullableSymbol(property);
		//if (property.Nullable && !property.NetType.Contains("TrackableCollection")  && property.Nullable && property.NetType != "String" && property.NetType != "Byte[]"){
		//		nullable= "?";
		//}
		
#>
<#if (string.IsNullOrEmpty((string)GetCustomProperty(property, "Computed", "String")) && string.IsNullOrEmpty((string)GetCustomProperty(property, "ComputedLinq", "String"))) {#>
			
	public <#= property.NetType.Split(char.Parse("."))[property.NetType.Split(char.Parse(".")).Length - 1 ] #><#= nullable #> <#=property.Name#> { get; set; }
<#   }else if (!string.IsNullOrEmpty((string)GetCustomProperty(property, "Computed", "String"))){ #>
			 public <#= property.NetType #><#= nullable #> <#=property.Name#> {
				get{
					return <#= ((string)GetCustomProperty(property, "Computed", "String")).ToString().Replace("'", @"""") #>;
				}
				set{
				
				}
			 }

<# 		}else if (!string.IsNullOrEmpty((string)GetCustomProperty(property, "ComputedLinq", "String"))){ #>
			[DataMember]
          	 public <#= property.NetType #><#= nullable #> <#=property.Name#> { get; set; } //test

<# 			} #>
<# } #>	
             
<# foreach(PropertyInfo property in entity.Properties.Where(p=>p.Type.ToLower() != "include" && p.Entity.IsCustom && IsPropertyForBusinessObject(p))) {
			if (!property.IsPrimaryKey && !property.IsNavigationProperty){
				string nullable = "";
				if (property.Nullable && property.NetType != "String" && property.NetType != "Byte[]"){
					nullable= "?";
				}
			if (property.Type.ToLower() == "selectitemlist") {#>
		private Dictionary<string, string> _<#=property.Name#>List = null;
        public Dictionary<string, string> <#=property.Name#>List
        {
            get {
                if (_<#=property.Name#>List == null)
                    _<#=property.Name#>List = new Dictionary<string, string>();
                return _<#=property.Name#>List;
            }
            set {
                _<#=property.Name#>List = value;
            }   
        }			[DataMember]
           	public string <#=property.Name#>Value { get; set; }
           	public string <#=property.Name#>Text { get; set; }
			
<#			}else{  
			if (string.IsNullOrEmpty((string)GetCustomProperty(property, "Computed", "String"))) {#>
			[DataMember]
          	 public <#= property.NetType #><#= nullable #> <#=property.Name#> { get; set; }
<# 			}else{ #>
			 public <#= property.NetType #><#= nullable #> <#=property.Name#> {
				get{
					return <#= ((string)GetCustomProperty(property, "Computed", "String")).ToString().Replace("'", @"""") #>;
				}
				set{
				
				}
			 }
<# 			}
			} #>
<#		}else if (!property.IsNavigationPropertyMany){ #>
			[DataMember]
			//[System.Xml.Serialization.SoapIgnoreAttribute()]
			//[System.Xml.Serialization.XmlIgnoreAttribute()]
			public <#= property.NetType.Split(char.Parse("."))[property.NetType.Split(char.Parse(".")).Length - 1 ] #> <#=property.Name#> { get; set; }
<#		}else{ #>
			[DataMember]
			//[System.Xml.Serialization.SoapIgnoreAttribute()]
			//[System.Xml.Serialization.XmlIgnoreAttribute()]
			public List<<#= property.NetType.Split(char.Parse("."))[property.NetType.Split(char.Parse(".")).Length - 1 ] #>> <#=property.Name#> { get; set; }
	<#  } 
	}#>


	      #region propertyNames
		public static readonly string EntityName = "<#= entity.Name #>";

        public struct PropertyNames {
<# foreach(PropertyInfo property in entity.Properties.Where (p=>IsPropertyForBusinessObject(p))) {#>
            public static readonly string <#=property.Name#> = "<#=property.Name#>";
<# }#>
		}
		#endregion
	}
	<# 
		}catch(Exception ex){
		throw new Exception(string.Format("El error ocurrió en la entidad {0}",entity.Name),ex);
		}
	} #> 
	
}
<#+
public string PrepareLinqExpression(string originalValue){
	string result = originalValue;
	if (originalValue.Contains("[NotDeleted]") || originalValue.Contains("[AND]")){
		result = result.Replace("[NotDeleted]", "deleted => deleted.IsDeleted != true || deleted.IsDeleted == null");
		result = result.Replace("[AND]", "&&");
		result = result.Replace("[Quote]", "\"");
	}

	return result;
}

public string NullableSymbol(PropertyInfo property){
			string result = "";
	string pname = property.NetType.Split(char.Parse("."))[property.NetType.Split(char.Parse(".")).Length - 1 ];
	
	
		if (!property.Type.Contains("TrackableCollection")  && !property.Type.ToLower().Contains("string") && !property.Type.ToLower().Contains("xml") && property.Entity.Model.Entities.Count(p=>p.Name == pname) == 0 ) {
			if (!property.Type.Contains("TrackableCollection")  && property.Type != "String" && property.Type != "Binary" && property.IsPrimaryKey== false){
				if (property.Nullable)
				{
					result = "?";
				}
			}else if (property.IsPrimaryKey && property.Type != "String"){
				result = "?";
			}
		}else if (property.IsPrimaryKey && property.Type != "String" && property.Type != "DateTime"){
			result = "?";
		}
		
		return result;
	}
public object GetCustomProperty(EntityInfo entity, string customPropertyName, string propertyType){
	object result = null;
		if (propertyType.ToLower() =="boolean")
			result = false;
		else if(propertyType.ToLower() == "string")
			result = "";
		//Write(property.CustomProperties.Count().ToString());

		CustomPropertyInfo cp = entity.CustomProperties.FirstOrDefault(p=>p.Name == customPropertyName);
		if (cp!= null ){
			//Write(cp.Value);
			if(propertyType.ToLower() == "boolean")	
				result = Convert.ToBoolean(cp.Value);
			else if(propertyType.ToLower() == "string")
				result = Convert.ToString(cp.Value);
			else
				result = Convert.ToString(cp.Value);
		}		
		
	
		return result;
}
public object GetCustomProperty(ModelInfo model, string customPropertyName, string propertyType){
	object result = null;
		if (propertyType.ToLower() =="boolean")
			result = false;
		else if(propertyType.ToLower() == "string")
			result = "";
		

		CustomPropertyInfo cp = model.CustomProperties.FirstOrDefault(p=>p.Name == customPropertyName);
		if (cp!= null ){
			//Write(cp.Value);
			if(propertyType.ToLower() == "boolean")	
				result = Convert.ToBoolean(cp.Value);
			else if(propertyType.ToLower() == "string")
				result = Convert.ToString(cp.Value);
			else
				result = Convert.ToString(cp.Value);
		}		
		
	
		return result;
}
public bool IsPropertyForBusinessObject(PropertyInfo property){
	bool result = false;
		if (
			(property.Type.ToLower() == "string" 
			|| property.Type.ToLower() == "int"
			|| property.Type.ToLower() == "guid"
			|| property.Type.ToLower() == "int16"
			|| property.Type.ToLower() == "int32"
			|| property.Type.ToLower() == "datetime" 
			|| property.Type.ToLower() == "timespan" 
			|| property.Type.ToLower() == "double"
			|| property.Type.ToLower() == "decimal"
			|| property.Type.ToLower() == "smallint" 
			|| property.Type.ToLower() == "boolean" 
			|| property.Type.ToLower() == "string" 
			|| property.Type.ToLower() == "byte[]"
			|| property.Type.ToLower() == "binary" 
			|| property.Type.ToLower() == "bit" ) || ( property.Type.ToLower() != "captcha")){
			result = true;
		}
	return result;
}
public object GetCustomProperty(PropertyInfo property, string customPropertyName, string propertyType){
		
		object result = null;
		if (propertyType.ToLower() =="boolean")
			result = false;
		else if(propertyType.ToLower() == "string")
			result = "";
		else if (propertyType.ToLower() == "int?")
			result = null;
		//Write(property.CustomProperties.Count().ToString());

		CustomPropertyInfo cp = property.CustomProperties.FirstOrDefault(p=>p.Name == customPropertyName);
		if (cp!= null ){
			//Write(cp.Value);
			if(propertyType.ToLower() == "boolean")	
				result = Convert.ToBoolean(cp.Value);
			else if(propertyType.ToLower() == "string")
				result = Convert.ToString(cp.Value);
			else if(propertyType.ToLower() == "int?")
				result = Convert.ToInt32(cp.Value);
			else
				result = Convert.ToString(cp.Value);
		}		
		
	
		return result;
		
}
#>
