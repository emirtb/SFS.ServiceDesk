<#@ output  extension="txt" #>
<#@ template language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Web.dll" #>
<#@ import namespace="SFSdotNet.VSAddin2015.Model" #>
<#@ import namespace="SFSdotNet.VSAddin2015.Model.Utils" #>
<#@ import namespace="SFSdotNet.VSAddin2015.EngTool" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Linq" #>
<#+ void GenerateAllControllers(ModelInfo model)
{
	
	
#>
// <Template>
//   <SolutionTemplate></SolutionTemplate>
//   <Version>20150126.0020</Version>
//   <Update>uiModel.ModuleNamespace</Update>
// </Template>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

using <#= model.Namespace #>.BR;
using System.Web.Script.Serialization;
using <#= model.Namespace #>.Web.Mvc.Models;
using <#= model.Namespace #>.Web.Mvc.Resources;
using BO = <#= model.Namespace #>.BusinessObjects;
using SFSdotNet.Framework.Web.Mvc.Security;
using SFSdotNet.Framework.Web.Mvc;
using SFSdotNet.Framework.Web.Mvc.Models;
using SFSdotNet.Framework.Web.Mvc.Resources;
using SFSdotNet.Framework.Web.Mvc.Controllers;
using MvcSiteMapProvider;
using System.Web.Routing;
using System.Collections;

using Newtonsoft.Json.Serialization;
using Newtonsoft.Json;
using SFSdotNet.Framework.My;

using <#= model.Namespace #>.BusinessObjects;

<#+
foreach( var entity in model.Entities.Where(p=>(bool)GetCustomProperty(p, "IsGeneric", "Boolean") == false) ){
	System.Text.StringBuilder sbExcludes = new System.Text.StringBuilder();
	if (entity.Properties.Where(p=>p.Type == "Binary").Count()> 0){
		sbExcludes.Append(@"[Bind(Exclude = """);
		int nForExcludes = 0;
		foreach (var file in entity.Properties.Where(p=>p.Type == "Binary")){
			if (nForExcludes > 0)
				sbExcludes.Append(",");	
			sbExcludes.Append(file.Name);
			nForExcludes ++;
		}
		sbExcludes.Append(@""")]");
	}

	try{
		if (string.IsNullOrEmpty(entity.DefaultProperty)){
				entity.DefaultProperty = entity.Properties[0].Name;
			}
		entityPluralName = entity.SetName;
		entitySingularName = entity.Name;
		string controllerName = entityPluralName;
		if (!string.IsNullOrEmpty((string)GetCustomProperty(entity, "ControllerName", "String")))
		{
			controllerName =(string)GetCustomProperty(entity, "ControllerName", "String");
		}
#>
namespace <#= entity.Model.Namespace #>.Web.Mvc.Controllers
{
	using <#= entity.Model.Namespace #>.Web.Mvc.Models.<#= entity.SetName #>;

<#+ 
		var customControlller = (string)GetCustomProperty(entity.Model, "CustomController", "String");		
		if (!string.IsNullOrEmpty(customControlller)){
#>
    public partial class <#= controllerName #>Controller : <#= customControlller #><Models.<#=entity.SetName#>.<#=entity.Name#>Model>
    {

<#+  
		}else{
 #>
    public partial class <#= controllerName #>Controller : SFSdotNet.Framework.Web.Mvc.ControllerBase<Models.<#=entity.SetName#>.<#=entity.Name#>Model>
    {
<#+ } #>       


	#region partial methods
        ControllerEventArgs<Models.<#= entity.SetName #>.<#= entity.Name #>Model> e = null;
        partial void OnValidating(object sender, ControllerEventArgs<Models.<#= entity.SetName #>.<#= entity.Name #>Model> e);
        partial void OnGettingExtraData(object sender, MyEventArgs<UIModel<Models.<#= entity.SetName #>.<#= entity.Name #>Model>> e);
        partial void OnCreating(object sender, ControllerEventArgs<Models.<#= entity.SetName #>.<#= entity.Name #>Model> e);
        partial void OnCreated(object sender, ControllerEventArgs<Models.<#= entity.SetName #>.<#= entity.Name #>Model> e);
        partial void OnEditing(object sender, ControllerEventArgs<Models.<#= entity.SetName #>.<#= entity.Name #>Model> e);
        partial void OnEdited(object sender, ControllerEventArgs<Models.<#= entity.SetName #>.<#= entity.Name #>Model> e);
        partial void OnDeleting(object sender, ControllerEventArgs<Models.<#= entity.SetName #>.<#= entity.Name #>Model> e);
        partial void OnDeleted(object sender, ControllerEventArgs<Models.<#= entity.SetName #>.<#= entity.Name #>Model> e);
    	partial void OnShowing(object sender, MyEventArgs<UIModel<Models.<#= entity.SetName #>.<#= entity.Name #>Model>> e);
    	partial void OnGettingByKey(object sender, ControllerEventArgs<Models.<#= entity.SetName #>.<#= entity.Name #>Model> e);
        partial void OnTaken(object sender, ControllerEventArgs<Models.<#= entity.SetName #>.<#= entity.Name #>Model> e);
       	partial void OnCreateShowing(object sender, ControllerEventArgs<Models.<#= entity.SetName #>.<#= entity.Name #>Model> e);
		partial void OnEditShowing(object sender, ControllerEventArgs<Models.<#= entity.SetName #>.<#= entity.Name #>Model> e);
		partial void OnDetailsShowing(object sender, ControllerEventArgs<Models.<#= entity.SetName #>.<#= entity.Name #>Model> e);
 		partial void OnActionsCreated(object sender, MyEventArgs<UIModel<Models.<#= entity.SetName #>.<#= entity.Name #>Model >> e);
		partial void OnCustomActionExecuting(object sender, MyEventArgs<ContextActionModel<Models.<#= entity.SetName #>.<#= entity.Name #>Model>> e);
		partial void OnCustomActionExecutingBackground(object sender, MyEventArgs<ContextActionModel<Models.<#= entity.SetName #>.<#= entity.Name #>Model>> e);
        partial void OnDownloading(object sender, MyEventArgs<ContextActionModel<Models.<#= entity.SetName #>.<#= entity.Name #>Model>> e);
      	partial void OnAuthorization(object sender, AuthorizationContext context);
		 partial void OnFilterShowing(object sender, MyEventArgs<UIModel<Models.<#= entity.SetName #>.<#= entity.Name #>Model >> e);
         partial void OnSummaryOperationShowing(object sender, MyEventArgs<UIModel<Models.<#= entity.SetName #>.<#= entity.Name #>Model>> e);

        partial void OnExportActionsCreated(object sender, MyEventArgs<UIModel<Models.<#= entity.SetName #>.<#= entity.Name #>Model>> e);


		protected override void OnVirtualFilterShowing(object sender, MyEventArgs<UIModel<<#= entity.Name #>Model>> e)
        {
            OnFilterShowing(sender, e);
        }
		 public override void OnVirtualExportActionsCreated(object sender, MyEventArgs<UIModel<<#= entity.Name #>Model>> e)
        {
            OnExportActionsCreated(sender, e);
        }
        public override void OnVirtualDownloading(object sender, MyEventArgs<ContextActionModel<<#= entity.Name #>Model>> e)
        {
            OnDownloading(sender, e);
        }
        public override void OnVirtualShowing(object sender, MyEventArgs<UIModel<<#= entity.Name #>Model>> e)
        {
            OnShowing(sender, e);
        }

	#endregion
	#region API
	 public override ActionResult ApiCreateGen(<#= entity.Name #>Model model, ContextRequest contextRequest)
        {
            return CreateGen(model, contextRequest);
        }

              public override ActionResult ApiGetByJson(string filter, int? pageSize, int? page, string orderBy, string orderDir, ContextRequest contextRequest, object[] extraParams)
        {
            return GetByJson(filter, pageSize, page, orderBy, orderDir, contextRequest, extraParams);
        }
        public override ActionResult ApiGetByKeyJson(string id, ContextRequest contextRequest)
        {
			if (contextRequest == null || contextRequest.Company == null || contextRequest.User == null )
            {
                contextRequest = GetContextRequest();
            }
            return  GetByKeyJson(id, contextRequest, true);
        }
      
		 public override ActionResult ApiGetByCount(string filter, ContextRequest contextRequest)
        {
            return GetByCount(filter, contextRequest);
        }
         protected override ActionResult ApiDeleteGen(List<<#= entity.Name #>Model> models, ContextRequest contextRequest)
        {
            List<<#= entity.Name #>> objs = new List<<#= entity.Name #>>();
            foreach (var model in models)
            {
                objs.Add(model.GetBusinessObject());
            }
            try
            {
                BR.<#= entity.SetName #>BR.Instance.DeleteBulk(objs, contextRequest);
                if (this.IsRESTRequest == true)
                {
                    //return Json(new { status = "success" }, JsonRequestBehavior.AllowGet);
					return ResolveApiResponse("success", null, null, null);

                }
                else
                {
                    return Content("ok");

                }
            }
            catch (Exception ex)
            {
               if (this.IsRESTRequest == true)
                {
                    //return Json(new { status = "error", reason = "error", message= ex.ToString() }, JsonRequestBehavior.AllowGet);
					return ResolveApiResponse("error", "exception", ex.ToString(), null );

                }
                else
                {
                    return Json(ex.ToString(), JsonRequestBehavior.AllowGet);

                }
            }
        }
        protected override ActionResult ApiUpdateGen(List<<#= entity.Name #>Model> models, ContextRequest contextRequest)
        {
            List<<#= entity.Name #>> objs = new List<<#= entity.Name #>>();
            foreach (var model in models)
            {
                objs.Add(model.GetBusinessObject());
            }
            try
            {
                foreach (var obj in objs)
                {
                    BR.<#= entity.SetName #>BR.Instance.Update(obj, contextRequest);

                }
                return Content("ok");
            }
            catch (Exception ex)
            {
                return Json(ex.ToString(), JsonRequestBehavior.AllowGet);
            }
        }


	#endregion
#region Validation methods	
	    private void Validations(<#= entity.Name #>Model model) { 
            #region Remote validations

<#+		PropertyInfo _propertyKey = entity.Properties.FirstOrDefault(p=>p.IsPrimaryKey);
	
	 foreach (PropertyInfo property in entity.Properties.Where(p=>!string.IsNullOrEmpty((string)GetCustomProperty(p, "RemoteValidationAction", "String")))) { 
		string methodName = (string)GetCustomProperty(property, "RemoteValidationAction", "String"); #>	
		bool result<#= methodName #> = true;
		string message<#= methodName #> = "";
		On<#= methodName #>(ref result<#= methodName #>, ref message<#= methodName #>, model.<#= property.Name #>, Request.Form["Initial<#= property.Name #>"], Request.Form["<#= _propertyKey.Name #>"]);
		if (!result<#= methodName #>)
        	ModelState.AddModelError("<#= property.Name #>", message<#= methodName #>);
<#+ } #>
            #endregion
		}

<#+ foreach (PropertyInfo property in entity.Properties.Where(p=>!string.IsNullOrEmpty((string)GetCustomProperty(p, "RemoteValidationAction", "String")))) { 
		string methodName = (string)GetCustomProperty(property, "RemoteValidationAction", "String"); #>	

        partial void On<#= methodName #>(ref bool result, ref string message, string candidate, string initialValue, string id);
        public ActionResult <#= methodName #>(string <#= property.Name #>, string Initial<#= property.Name #>, string <#= _propertyKey.Name #>)
        {
            bool result = true;
			string message = "";
            On<#= methodName #>(ref result, ref message, <#= property.Name #>, Initial<#= property.Name #>, <#= _propertyKey.Name #>);
			if (result)
            	return Json(result, JsonRequestBehavior.AllowGet);
			else
				return Json(message, JsonRequestBehavior.AllowGet);
        }
<#+ } #>
#endregion
<#+ if (!entity.IsCustom && !string.IsNullOrEmpty((string)GetCustomProperty(entity, "UIListFooter", "String"))) {#>

 		public ActionResult GetSummaryOperation(string operation, string filter) {
            <#= entity.Name #>Model result = new <#= entity.Name #>Model();

            var ob = BR.<#= entity.SetName #>BR.Instance.GetSummaryOperation(operation,HttpUtility.UrlDecode(filter), GetContextRequest());
            if (ob != null) {
                result.Bind(ob);
				}
            var uiModel = new UIModel<<#= entity.Name #>Model>();
            uiModel.Items.Add(result);
            MyEventArgs<UIModel<<#= entity.Name #>Model>> me = null;
            OnSummaryOperationShowing(this, me = new MyEventArgs<UIModel<<#= entity.Name #>Model>>() { Object =  uiModel });
            if (me != null)
            {
                result = uiModel.Items[0];
            }
            return Json(result, JsonRequestBehavior.AllowGet) ;

        }
<#+ } #>
		
 		public AuthorizationContext Authorization(AuthorizationContext context)
        {
            OnAuthorization(this,  context );
            return context ;
        }
		public List<<#= entity.Name #>Model> GetAll() {
            <#+ 
				string _orderBy ="";
				if (!string.IsNullOrEmpty(entity.DefaultProperty)){
					var propertyDefault = entity.Properties.Find(p=>p.Name == entity.DefaultProperty);
					if (propertyDefault != null ){
						if (string.IsNullOrEmpty((string)GetCustomProperty(propertyDefault, "Computed", "String"))){
							_orderBy = propertyDefault.Name;
						}
					}
						
					
				}
				if (string.IsNullOrEmpty(_orderBy)){
					var candidatesOrderBy = entity.Properties.Where(p=>(bool)GetCustomProperty(p, "IsOrderBy", "Boolean")).OrderBy(p=>p.Order);
					if (candidatesOrderBy.Count() > 0)
						_orderBy = candidatesOrderBy.ToList()[0].Name;
					if (candidatesOrderBy.Count() > 1){
						
					}
				}
				if (string.IsNullOrEmpty(_orderBy)){
					var candidatesOrderBy = entity.Properties.Where(p=>string.IsNullOrEmpty((string)GetCustomProperty(p, "Computed", "String")));
					if (candidatesOrderBy.Count() > 0)
						_orderBy = candidatesOrderBy.ToList()[0].Name;
				}
			if (!string.IsNullOrEmpty(_orderBy))  { #>
			var bos = BR.<#= entity.SetName #>BR.Instance.GetBy("",
					new SFSdotNet.Framework.My.ContextRequest()
					{
						CustomQuery = new SFSdotNet.Framework.My.CustomQuery()
						{
							OrderBy = "<#=_orderBy #>",
							SortDirection = SFSdotNet.Framework.Data.SortDirection.Ascending
						}
					});
            <#+ }else{ #>

			var bos = BR.<#= entity.SetName #>BR.Instance.GetAll();
			
			<#+ } #>
			List<<#= entity.Name #>Model> results = new List<<#= entity.Name #>Model>();
            <#= entity.Name #>Model model = null;
            foreach (var bo in bos)
            {
                model = new <#= entity.Name #>Model();
                model.Bind(bo);
                results.Add(model);
            }
            return results;

        }
        //
        // GET: /<#= entityPluralName #>/
		[MyAuthorize("r", "<#= entity.Name #>", "<#=entity.Model.SafeNamespace#>", typeof(<#= controllerName #>Controller))]
		public ActionResult Index()
        {
    		var uiModel = GetContextModel(UIModelContextTypes.ListForm, null);
			ViewBag.UIModel = uiModel;
			uiModel.FilterStart = (string)ViewData["startFilter"];
                    MyEventArgs<UIModel<<#= entity.Name #>Model>> me = null;

            OnActionsCreated(this, me = new MyEventArgs<UIModel<<#= entity.Name #>Model>>() { Object = uiModel });

			OnExportActionsCreated(this, (me != null ? me : me = new MyEventArgs<UIModel<<#= entity.Name #>Model>>() { Object = uiModel }));

            if (me != null)
            {
                uiModel = me.Object;
            }
            if (me == null)
                me = new MyEventArgs<UIModel<<#= entity.Name #>Model>>() { Object = uiModel };
           
            Showing(ref uiModel);
            ViewData["startFilter"] = uiModel.FilterStart;


            //return View("ListGen");
			return ResolveView(uiModel);
        }
		[MyAuthorize("r", "<#= entity.Name #>", "<#=entity.Model.SafeNamespace#>", typeof(<#= controllerName #>Controller))]
		public ActionResult ListViewGen(string idTab, string fk , string fkValue, string startFilter, ListModes  listmode  = ListModes.SimpleList, PropertyDefinition parentRelationProperty = null, object parentRelationPropertyValue = null )
        {
			ViewData["idTab"] = System.Web.HttpContext.Current.Request.QueryString["idTab"]; 
		 	ViewData["detpop"] = true; // details in popup
            if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["fk"])) {
                ViewData["fk"] = System.Web.HttpContext.Current.Request.QueryString["fk"]; 
            }
			if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["fkValue"]))
            {
                ViewData["fkValue"] = System.Web.HttpContext.Current.Request.QueryString["fkValue"];
            }
			if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["startFilter"]))
            {
                ViewData["startFilter"] = Request.QueryString["startFilter"];
            }
			
			UIModel<<#= entity.Name #>Model> uiModel = GetContextModel(UIModelContextTypes.ListForm, null);

            MyEventArgs<UIModel<<#= entity.Name #>Model>> me = null;

            OnActionsCreated(this, me = new MyEventArgs<UIModel<<#= entity.Name #>Model>>() { Object = uiModel });
            if (me == null)
                me = new MyEventArgs<UIModel<<#= entity.Name #>Model>>() { Object = uiModel };
            uiModel.Properties = GetProperties(uiModel);
            uiModel.ContextType = UIModelContextTypes.ListForm;
             uiModel.FilterStart = (string)ViewData["startFilter"];
            Showing(ref uiModel);
            ViewData["startFilter"] = uiModel.FilterStart;
			 if (listmode == ListModes.SimpleList)
                return ResolveView(uiModel);
            else
            {
                ViewData["parentRelationProperty"] = parentRelationProperty;
                ViewData["parentRelationPropertyValue"] = parentRelationPropertyValue;
                return PartialView("ListForTagSelectView");
            }
            return ResolveView(uiModel);
        }
		List<PropertyDefinition> _properties = null;

		 protected override List<PropertyDefinition> GetProperties(UIModel uiModel,  params string[] specificProperties)
        { 
            return GetProperties(uiModel, false, null, specificProperties);
        }

		protected override List<PropertyDefinition> GetProperties(UIModel uiModel, bool decripted, Guid? id, params string[] specificProperties)
            {

			bool allProperties = true;    
                if (specificProperties != null && specificProperties.Length > 0)
                {
                    allProperties = false;
                }


			List<CustomProperty> customProperties = new List<CustomProperty>();
			if (_properties == null)
                {
                List<PropertyDefinition> results = new List<PropertyDefinition>();

			string id<#= entity.Name #> = GetRouteDataOrQueryParam("id");
			if (id<#= entity.Name #> != null)
			{
				if (!decripted)
                {
					id<#= entity.Name #> = SFSdotNet.Framework.Entities.Utils.GetPropertyKey(id<#= entity.Name #>.Replace("-","/"), "<#= entity.Properties.FirstOrDefault(p=>p.IsPrimaryKey).Name #>");
				}else{
					if (id != null )
						id<#= entity.Name #> = id.Value.ToString();                

				}
			}

			bool visibleProperty = true;	
			 bool conditionalshow =false;
                if (uiModel.ContextType == UIModelContextTypes.EditForm || uiModel.ContextType == UIModelContextTypes.DisplayForm ||  uiModel.ContextType == UIModelContextTypes.GenericForm )
                    conditionalshow = true;
<#+ 		bool 	isvisible =true;
			bool ismany =false;
			string link;
			string UpdatedPropertyName = "";
			if (!string.IsNullOrEmpty((String)GetCustomProperty(entity.Model,"AutoUpdatedDateProperty", "String"))){
				UpdatedPropertyName = (String)GetCustomProperty(entity.Model,"AutoUpdatedDateProperty", "String");
			}
			string CreatedPropertyName = "";
			if (!string.IsNullOrEmpty((String)GetCustomProperty(entity.Model,"AutoCreatedDateProperty", "String"))){
				CreatedPropertyName  = (String)GetCustomProperty(entity.Model,"AutoCreatedDateProperty", "String");
			}
			string AutoCreatedUserProperty = "";
			if (!string.IsNullOrEmpty((String)GetCustomProperty(entity.Model,"AutoCreatedUserProperty", "String"))){
				AutoCreatedUserProperty  = (String)GetCustomProperty(entity.Model,"AutoCreatedUserProperty", "String");
			}

			string AutoUpdatedUserProperty = "";
			if (!string.IsNullOrEmpty((String)GetCustomProperty(entity.Model,"AutoUpdatedUserProperty", "String"))){
				AutoUpdatedUserProperty  = (String)GetCustomProperty(entity.Model,"AutoUpdatedUserProperty", "String");
			}

			string CompanyIdProperty = "";
			if (!string.IsNullOrEmpty((String)GetCustomProperty(entity.Model,"CompanyProperty", "String"))){
				CompanyIdProperty  = (String)GetCustomProperty(entity.Model,"CompanyProperty", "String");
			}
			int order = 100;
			List<string> localizableFields = new List<string>();
			List<string> localizableDataFields = new List<string>();
			string LocalizableDataLanguages = (String)GetCustomProperty(entity.Model,"LocalizableDataLanguages", "String");
			foreach(var prop in entity.Properties.Where(p=>p.IsLocalizable)){

				if (prop.IsNavigationProperty){
					foreach (var lang in LocalizableDataLanguages.Split(char.Parse(",")))
					{
						var fields = (String)GetCustomProperty(prop,"LocalizableFields", "String");
						if (!string.IsNullOrEmpty(fields)){
                            foreach (var fieldPar in fields.Split(char.Parse("|")).Where(p=>p.ToLower().StartsWith(lang.ToLower())))
                            {
		 						localizableDataFields.Add(fieldPar.Split(char.Parse(":"))[1] + "_" + fieldPar.Split(char.Parse(":"))[0] + "_" + prop.Name); //secFile1_ES_secFile
                            }
                        }
					}
				}else{
					foreach (var lang in LocalizableDataLanguages.Split(char.Parse(",")))
					{
						localizableDataFields.Add(prop.Name + "_" + lang);
					}
                }
				
			}
			foreach(var item in entity.Properties.Where(p=>( (IsVisibleProperty(p) || ( p.Name == CompanyIdProperty && entity.Name == "secCompany")) ||  p.Name == AutoCreatedUserProperty || p.Name == AutoUpdatedUserProperty  || p.Name == CreatedPropertyName || p.Name ==  UpdatedPropertyName) && p.Name != AutoDeletedProperty && (p.Visible) && !p.Type.ToLower().Contains("xml") && ((p.IsForeignKey == true && p.IsNavigationProperty == false) == false )).OrderBy(p=>p.Order)) { 
				bool isFKProperty = false;
				var propRefNav = entity.NavigationProperties.FirstOrDefault(p=>p.PropertyRefName == item.Name);
				if (propRefNav != null ){
					isFKProperty = true;	
				}

				link ="";
				string relPropertyName = "";
				if (item.Type== "String" && item.MaxLength ==0){
					//isvisible = false;
				
				}else
					isvisible=true;
				if(isvisible){
					EntityInfo entityRel = null;
					string propertyNameSort = item.Name;
					string pathName ="";
					if (item.IsNavigationProperty)  {
					
						var navprop = entity.NavigationProperties.FirstOrDefault(p=>p.PropertyName== item.Name);
						var entityRelName = navprop.EntityType.Split(char.Parse("."))[navprop.EntityType.Split(char.Parse(".")).Length -1];
						entityRel = entity.Model.Entities.Find(p=>p.Name == entityRelName);
						if (!string.IsNullOrEmpty(entityRel.DefaultProperty))
							propertyNameSort = entityRel.DefaultProperty;
						else
							propertyNameSort = entityRel.Properties[0].Name;
						propertyNameSort = item.Name + "." + propertyNameSort;
						pathName= entityRel.SetName;
						// 
						var relNav = entityRel.NavigationProperties.Where(p=>p.RelationshipName == item.NavigationProperty.RelationshipName && p.ToRole != item.NavigationProperty.ToRole).FirstOrDefault();
						relPropertyName = relNav.PropertyName;
						//
						if (item.IsNavigationPropertyMany){
							if (item.Type.Substring(item.Type.LastIndexOf(".") + 1) != entity.Name) // solo aplica en que caso de que no se trate de la misma entidad
								ismany = true;
							else
								ismany = false;
							
							var propertyKey = entity.Properties.FirstOrDefault(p=>p.IsPrimaryKey);
							string propertyKeyName = "";
							if (propertyKey != null)
								propertyKeyName = propertyKey.Name;
										System.Text.StringBuilder sbParams = new System.Text.StringBuilder();
					
							string startFilter = "";
							// many to many direct
							string convertDynStart = "";
							string convertDynEnd = "";
							if (propertyKey.Type.ToLower().Contains("guid")){
								convertDynStart = @"Guid(\""";
								convertDynEnd = @"\"")";
							}
							if (relNav.Multiplicity == "*")
							{
								startFilter =  @"+ (new UrlHelper(System.Web.HttpContext.Current.Request.RequestContext)).Encode(""it." + relPropertyName + ".Any(" + propertyKeyName + @" = "  + convertDynStart + @""" + id" + entity.Name +  @" +"""+ convertDynEnd + @") = True"")+ ""&isManyToMany=" + Code.PascalCase(ismany.ToString());
							}else{
								startFilter =  @"+ (new UrlHelper(System.Web.HttpContext.Current.Request.RequestContext)).Encode(""it." + relPropertyName + "." + propertyKeyName + @" = "  + convertDynStart + @""" + id" + entity.Name + @" +"""  + convertDynEnd + @""")+ """;
							}
							
							bool pal = (bool)GetCustomProperty(item, "UIExcludeSearch", "Boolean");
							sbParams.Append(string.Format("pal={0}&", pal.ToString()));
							bool es= (bool)GetCustomProperty(item, "UIPreventAutoLoad", "Boolean");
							sbParams.Append(string.Format("es={0}&", es.ToString()));
							int pag=10;				
							if ((int?)GetCustomProperty(item, "UIPaging", "Int?") != null){
								pag =(int)GetCustomProperty(item, "UIPaging", "Int?");
							}
							sbParams.Append(string.Format("pag={0}&", pag.ToString()));
							sbParams.Append("filterlinks=1&");
							link = @"VirtualPathUtility.ToAbsolute(""~/"") + """ + entity.Model.SafeNamespace + @"/" + entityRel.SetName +"/ListViewGen?overrideModule=\" + GetOverrideApp()  + \"&" + sbParams.ToString() +"idTab=" + item.Name +"&fk=" + relPropertyName + @"&startFilter=""" + startFilter + @"&fkValue="" + id" + entity.Name ;
						
							
						}else{
							link="";
							ismany =false;
						}

					}
		var property = item;		
			System.Text.StringBuilder sbExtraField = new System.Text.StringBuilder();
			System.Text.StringBuilder sbExtraAdditionalData = new System.Text.StringBuilder();

		if (property.Type == "Binary"  || ((bool)GetCustomProperty(item, "IsImage", "Boolean") && property.IsNavigationProperty && !property.IsNavigationPropertyMany )){
			PropertyInfo propertyFile = null;
			if (property.Type == "Binary"){
				propertyFile = property;
            

				string groupFileName = (string)GetCustomProperty(property,"FileData", "String");
				if (!string.IsNullOrEmpty(groupFileName)){
						sbExtraField.AppendLine(string.Format(@"FileDataField = ""{0}""", property.Name));
					var fileSizeProperty = entity.Properties.FirstOrDefault(p=>(string)GetCustomProperty(p,"FileSize", "String") == groupFileName);
					if (fileSizeProperty != null ){
							if (sbExtraField.Length > 0)
								sbExtraField.Append(", ");
							sbExtraField.AppendLine(string.Format(@"FileSizeField = ""{0}""", fileSizeProperty.Name));						
					}
				
						var fileTypeProperty = entity.Properties.FirstOrDefault(p=>(string)GetCustomProperty(p,"FileType", "String") == groupFileName);
						if (fileTypeProperty != null){
							if (sbExtraField.Length > 0)
								sbExtraField.Append(", ");
							sbExtraField.AppendLine(string.Format(@"FileTypeField = ""{0}""", fileTypeProperty.Name));						
						}
						var fileNameProperty = entity.Properties.FirstOrDefault(p=>(string)GetCustomProperty(p,"FileName", "String") == groupFileName);
						if (fileNameProperty != null){
							if (sbExtraField.Length > 0)
								sbExtraField.Append(", ");
							sbExtraField.AppendLine(string.Format(@"FileNameField =  ""{0}""", fileNameProperty.Name));
						
						}
					
						var fileIdProperty = entity.Properties.FirstOrDefault(p=>p.IsPrimaryKey);
						if (fileIdProperty != null){
							if (sbExtraField.Length > 0)
								sbExtraField.Append(", ");
							sbExtraField.AppendLine(string.Format(@"FileIdField =  ""{0}""", fileIdProperty.Name));
							sbExtraField.Append(", ");
						}

						//--- aditionalData
					sbExtraAdditionalData.Append(string.Format(@"PropertyId = ""{0}""", property.Entity.Properties.First(p=>p.IsPrimaryKey).Name));
					sbExtraAdditionalData.Append(", ");
						sbExtraAdditionalData.Append(string.Format(@"PropertyData = ""{0}""", property.Name));
							sbExtraAdditionalData.Append(", ");
						sbExtraAdditionalData.Append(string.Format(@"SafeKey = Model.SafeKey"));
							sbExtraAdditionalData.Append(", ");
						sbExtraAdditionalData.Append(string.Format(@"ControllerName = ""{0}""", entity.SetName));
							sbExtraAdditionalData.Append(", ");
						sbExtraAdditionalData.Append(string.Format(@"TypeName = ""{0}.{1}""", entity.SetName, entity.Name));

							sbExtraAdditionalData.Append(", ");
						sbExtraAdditionalData.Append(string.Format(@"Namespace = ""{0}""", entity.Model.Namespace));

					 fileSizeProperty = entity.Properties.FirstOrDefault(p=>(string)GetCustomProperty(p,"FileSize", "String") == groupFileName);
					if (fileSizeProperty != null ){
						//if (fileSizeProperty.Name == groupFileName){
							if (sbExtraAdditionalData.Length > 0)
								sbExtraAdditionalData.Append(", ");
							sbExtraAdditionalData.Append(string.Format(@"PropertySize = ""{0}""", fileSizeProperty.Name));
							sbExtraAdditionalData.Append(", ");
							sbExtraAdditionalData.Append(string.Format(@"FileSize = Model.{0}", fileSizeProperty.Name));
						//}
					}
				
						 fileTypeProperty = entity.Properties.FirstOrDefault(p=>(string)GetCustomProperty(p,"FileType", "String") == groupFileName);
						if (fileTypeProperty != null){
					//if (fileTypeProperty.Name == groupFileName){
							if (sbExtraAdditionalData.Length > 0)
								sbExtraAdditionalData.Append(", ");
							sbExtraAdditionalData.Append(string.Format(@"PropertyType = ""{0}""", fileTypeProperty.Name));
						
					//	}
						}
						 fileNameProperty = entity.Properties.FirstOrDefault(p=>(string)GetCustomProperty(p,"FileName", "String") == groupFileName);
						if (fileNameProperty != null){
						//if (fileNameProperty.Name == groupFileName){
							if (sbExtraAdditionalData.Length > 0)
								sbExtraAdditionalData.Append(", ");
							sbExtraAdditionalData.Append(string.Format(@"FileName = Model.{0}", fileNameProperty.Name));
							sbExtraAdditionalData.Append(", ");
							sbExtraAdditionalData.Append(string.Format(@"PropertyName = ""{0}""", fileNameProperty.Name));
						}

				
				}

			}else{
				var navpropFile = entity.NavigationProperties.FirstOrDefault(p=>p.PropertyName== item.Name);
				var entityRelNameFile = navpropFile.EntityType.Split(char.Parse("."))[navpropFile.EntityType.Split(char.Parse(".")).Length -1];
				var entityRelFile = entity.Model.Entities.Find(p=>p.Name == entityRelNameFile);
						
				//propertyFile 
				sbExtraField.AppendLine(string.Format(@"FileDataField = ""FileData"","));
				sbExtraField.AppendLine(string.Format(@"FileSizeField = ""FileSize"","));
				sbExtraField.AppendLine(string.Format(@"FileTypeField = ""FileType"","));
				sbExtraField.AppendLine(string.Format(@"FileIdField = ""FileIdField"","));
				
				item.CustomProperties.Add(new CustomPropertyInfo () { Name="FileTypeModelName", Value = string.Format(@"{0}.{1}Model", entityRelFile.SetName, entityRelFile.Name) });
				item.CustomProperties.Add(new CustomPropertyInfo () { Name="FileControllerName", Value = string.Format(@"{0}", entityRelFile.SetName) });
				
				
			}
		}
#>
visibleProperty =allProperties;
if (visibleProperty || specificProperties.Contains("<#=item.Name#>"))
{				
    customProperties = new List<CustomProperty>();

    <#+ foreach (var customProperty in item.CustomProperties )
        { #>
    customProperties.Add(new CustomProperty() { Name="<#= customProperty.Name #>", Value=@"<#= System.Web.HttpUtility.HtmlEncode(customProperty.Value) #>" });
		 
<#+        } #>
    <#+ if (item.IsNavigationProperty)
        {
			 #>
			customProperties.Add(new CustomProperty() { Name="Fk", Value=@"<#= relPropertyName #>" });
			//[RelationFilterable(DisableFilterableInSubfilter=true, FiltrablePropertyPathName="<#=property.Name#>.<#= entityRel.Properties.FirstOrDefault(p=>p.IsPrimaryKey).Name #>")]		
			customProperties.Add(new CustomProperty() { Name="FiltrablePropertyPathName", Value=@"<#=property.Name#>.<#= entityRel.Properties.FirstOrDefault(p=>p.IsPrimaryKey).Name #>" });
			customProperties.Add(new CustomProperty() { Name = "BusinessObjectSetName", Value = @"<#=entityRel.SetName#>" });
			
<#+		} #>



<#+		if ((bool)GetCustomProperty(item, "UITags", "Boolean"))
        {
			var navprop = entity.NavigationProperties.FirstOrDefault(p=>p.PropertyName== item.Name);
			var entityRelName = navprop.EntityType.Split(char.Parse("."))[navprop.EntityType.Split(char.Parse(".")).Length -1];
			var entityRel_1 = entity.Model.Entities.Find(p=>p.Name == entityRelName);
			 #>
			customProperties.Add(new CustomProperty() { Name="EntitySetName", Value=@"<#= entityRel_1.SetName #>" });
		 
<#+        }
	int orderThis = order;
	if (item.Name == UpdatedPropertyName ){
		orderThis = order + entity.Properties.Count;
	}
	if (item.IsNavigationProperty)
        {
			var navpropWE = entity.NavigationProperties.FirstOrDefault(p=>p.PropertyName== item.Name);
		
			var entityRelNameWE = navpropWE.EntityType.Split(char.Parse("."))[navpropWE.EntityType.Split(char.Parse(".")).Length -1];
			var entityRelWE = entity.Model.Entities.Find(p=>p.Name == entityRelNameWE);
			if ((bool)GetCustomProperty(entityRelWE, "Integrable", "Boolean") && (entityRelWE.Name != "secUser" && entityRelWE.Model.Namespace != "SFSdotNet.Framework.Security")) {
			 #>
			customProperties.Add(new CustomProperty() { Name="Integrable", Value="true" });
		 
<#+        }
        }
 #>

	
	//<#= entity.NavigationProperties.FirstOrDefault(p=>p.PropertyName== item.Name) != null? entity.NavigationProperties.FirstOrDefault(p=>p.PropertyName== item.Name).RelationshipName : "Null" #>
		//if (this.Request.QueryString["fk"] != "<#= item.Name #>")
        //	{
				results.Add(new PropertyDefinition()
                {
					Order = <#= orderThis #>,
				<#+ if (sbExtraField.Length > 0)  { #>
					<#= sbExtraField.ToString() #>
				<#+ } #>
				<#+ if (sbExtraAdditionalData.Length > 0)  { #>
					AditionalViewData = null, /*<#= sbExtraAdditionalData.ToString() #>*/
				<#+ } #>
				<#+ if (isFKProperty == true ){ #>
					IsForeignKey = true,

				<#+  }
				if ((bool)GetCustomProperty(item, "IsHidden", "Boolean")) { #>
					//IsHidden = true,	
<#+ } #>
<#+ 	if (item.IsNavigationPropertyMany) { #>				
					Link = <#= link #>,
					ModuleKey = "<#= entity.Model.SafeNamespace #>",
					BusinessObjectKey = "<#= entityRel.Name #>",
<#+ 	}else if(item.IsNavigationProperty) { 
				string getAction ="GetAll";	
				string getParams ="";
			
				if (!string.IsNullOrEmpty((string)GetCustomProperty(item, "UIGetParams", "String"))){
					getParams = (string)GetCustomProperty(item, "UIGetParams", "String");
				}else if (!string.IsNullOrEmpty((string)GetCustomProperty(item, "ReusableCatalogKey", "String")) && !string.IsNullOrEmpty((string)GetCustomProperty(entity.Model, "ReusableCatalog", "String"))){
					getParams = "p => p." + (string)GetCustomProperty(entity.Model, "ReusableCatalog", "String") + ".NameKey == \"" + (string)GetCustomProperty(property, "UIGetParams", "String") + "\"";
				}

				if (!string.IsNullOrEmpty((string)GetCustomProperty(item, "UIGetAction", "String"))){
						getAction= (string)GetCustomProperty(item, "UIGetAction", "String");
				}else if (!string.IsNullOrEmpty((string)GetCustomProperty(item, "ReusableCatalogKey", "String"))){
					getAction= "GetBy";
				}
				var entityFKDefaultColumn = entityRel.DefaultProperty?? entityRel.Properties[0].Name;

				string displayText = entityFKDefaultColumn;
				var keyEntityFK = entityRel.Properties.Find(p=>p.IsPrimaryKey);

				string displayValue = keyEntityFK.Name;
			if (!string.IsNullOrEmpty((string)GetCustomProperty(item, "UIDisplayText", "String"))){
					displayText= (string)GetCustomProperty(item, "UIDisplayText", "String");
			}
			if (!string.IsNullOrEmpty((string)GetCustomProperty(item, "UIDisplayValue", "String"))){
					displayValue= (string)GetCustomProperty(item, "UIDisplayValue", "String");
			}

	
	
	#>				
					
					ModuleKey = "<#= entity.Model.SafeNamespace #>",
					BusinessObjectKey = "<#= entityRel.Name #>",
					PropertyNavigationKey = "<#= displayValue #>",
					PropertyNavigationText = "<#= displayText #>",
<#+ 
	if ((bool)GetCustomProperty(item, "UILookUp", "Boolean")){  #>
					NavigationPropertyType = NavigationPropertyTypes.LookUp,
<#+ }else{
		if (property.PerformanceOption == PerformanceOptions.Fill){ #>
					NavigationPropertyType = NavigationPropertyTypes.SimpleDropDown,
<#+		}else if(property.PerformanceOption == PerformanceOptions.OnDemand){ #>
					NavigationPropertyType = NavigationPropertyTypes.Autocomplete,
<#+		}
	} #>
					GetMethodName = "<#= getAction #>",
					GetMethodParameters = "<#= getParams.Replace("\"",@"\""") #>",
					GetMethodDisplayText ="<#= displayText #>",
					GetMethodDisplayValue = "<#= displayValue #>",
<#+			if (localizableDataFields.Count() > 0)
			{
				foreach (var lang in LocalizableDataLanguages.Split(char.Parse(",")))
				{ 
					var localizableDataField = localizableDataFields.FirstOrDefault(p=>p.Split(char.Parse("_"))[0] == property.Name && p.Split(char.Parse("_"))[1].ToLower() == lang.ToLower()); //secFile1_ES
					if (localizableDataField != null ) { #>
					IsLocalizableDataField = true,
					LocalizableField = "<#= localizableDataField.Split(char.Parse("_"))[2] #>",
                    LocalizableLang = "<#= localizableDataField.Split(char.Parse("_"))[1] #>",		
<#+					}
		 
				}
			} #>
<#+ 	} #>					
					CustomProperties = customProperties,

                    PropertyName = "<#= item.Name #>",

					 MaxLength = <#=item.MaxLength #>,
<#+ if (property.Nullable){  #>
					 Nullable = true,
<#+ } else{ #>
					IsRequired = true ,
<#+ } #>

<#+ if ((bool)GetCustomProperty(item, "IsImage", "Boolean")){  #>
					 IsImage = true,

<#+ } #>

<#+ if (property.IsLocalizable){  #>
					 IsLocalizableField = true,
<#+ }else{
		if (localizableDataFields.Count() > 0){
			var localizableDataField = localizableDataFields.FirstOrDefault(p=>p.ToLower() == property.Name.ToLower());
			if (localizableDataField != null ) { #>
					IsLocalizableDataField = true,
					LocalizableField = "<#= localizableDataField.Split(char.Parse("_"))[0] #>",
                    LocalizableLang = "<#= localizableDataField.Split(char.Parse("_"))[1] #>",		
<#+			}
		}
	} #>
<#+ if (!string.IsNullOrEmpty((string)GetCustomProperty(item, "ReusableCatalogKey", "String"))){ #>

					UseMode = "<#= (string)GetCustomProperty(item, "ReusableCatalogKey", "String") #>",
<#+ }
		if (item.IsPrimaryKey || (bool)GetCustomProperty(item, "IsHidden", "Boolean")){
 #>
					IsHidden = true,
<#+ }
if(item.IsPrimaryKey) { #>
                    SystemProperty =  SystemProperties.Identifier ,
<#+ }
if ((bool)GetCustomProperty(item, "UIReadOnly", "Boolean")) {
#>
					IsReadOnly = true,
<#+ } #>
<#+ if (!string.IsNullOrEmpty((String)GetCustomProperty(property, "UIMask", "String"))){ #>
					Mask = "<#= (String)GetCustomProperty(property, "UIMask", "String") #>",
<#+ } #>
<#+ if (!string.IsNullOrEmpty(entity.DefaultProperty)){
 #>
					IsDefaultProperty = <#= (entity.DefaultProperty == item.Name).ToString().ToLower() #>,
<#+ } 
	if (!item.IsCustom || (item.IsCustom && !string.IsNullOrEmpty((string)GetCustomProperty(item, "ComputedLinq", "String")))) {  #>
                    SortBy = "<#= propertyNameSort #>",
<#+ }
		if (!string.IsNullOrEmpty((string)GetCustomProperty(item, "UIListFooter", "String"))){ #>
					Sum = true,
<#+ } #>					
<#+ if ((bool)GetCustomProperty(item, "UIMultiline", "Boolean")){ #>
					IsMultiline = true,
<#+ } #>	
<#+ if (item.Name == UpdatedPropertyName ) { #>
					IsUpdatedDate = true,
					SystemProperty = SystemProperties.UpdatedDate ,
	
<#+ }else if(item.Name == CreatedPropertyName) { #>
				SystemProperty = SystemProperties.CreatedDate ,
<#+ }else if(item.Name == AutoCreatedUserProperty) { #>
				SystemProperty = SystemProperties.CreatedUser,
<#+ }else if(item.Name == AutoUpdatedUserProperty) { #>
				SystemProperty = SystemProperties.UpdatedUser,
<#+  }else if (item.Name == AutoSizeBytesProperty){ #>
				SystemProperty = SystemProperties.SizeBytes,
<#+ } #>
<#+ if ((bool)GetCustomProperty(item, "UITags", "Boolean")){  #>
					NavigationPropertyType = NavigationPropertyTypes.Tags,
<#+ } #>
                    TypeName = "<#= item.Type #>",
                    IsNavigationProperty = <#= item.IsNavigationProperty.ToString().ToLower() #>,
					IsNavigationPropertyMany = <#= item.IsNavigationPropertyMany.ToString().ToLower() #>,
                    PathName = "<#= entity.Model.SafeNamespace #>/<#= pathName #>"
<#+ if (UpdatedPropertyName == item.Name) { #>
                    ,PropertyDisplayName = SFSdotNet.Framework.Web.Mvc.Resources.GlobalMessages.UPDATED

<#+  }else{ #>
                    /*,PropertyDisplayName = Resources.<#= entity.Name #>Resources.<#= item.Name == "Culture" ? (item.Name + "_").ToUpper() :  item.Name.ToUpper()  #>*/
<#+ } #>
                });
		//	}
	
	}
<#+ 			}
				order ++;
		} #>	
<#+			if ((bool)GetCustomProperty(entity, "Integrable", "Boolean")) { #> 								
                results.Add(new PropertyDefinition()
                {
					IsHidden = true,
					GetData = true,
                    Order = <#= order #>,
                    CustomProperties = customProperties,
                    PropertyName = "Id",
                    MaxLength = 0,
                    Nullable = true,
                    IsDefaultProperty = false,
                    SortBy = "Id",
                    TypeName = "Guid",
                    IsNavigationProperty = false,
                    IsNavigationPropertyMany = false,
                    PathName = "SFSAgroMx/",
                    PropertyDisplayName = "Id"
                });
<#+ } #>				
                    _properties = results;
                    return _properties;
                }
                else {
                    return _properties;
                }
            }

		protected override  UIModel<<#= entity.Name #>Model> GetByForShow(string filter, int? pageSize, int? page, string orderBy, string orderDir, ContextRequest contextRequest, params  object[] extraParams)
        {
			if (Request != null )
				if (!string.IsNullOrEmpty(Request.QueryString["q"]))
					filter = filter + HttpUtility.UrlDecode(Request.QueryString["q"]);
 if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
            }
            var bos = BR.<#= entity.SetName #>BR.Instance.GetBy(HttpUtility.UrlDecode(filter), pageSize, page, orderBy, orderDir, GetUseMode(), contextRequest, extraParams);
			//var bos = BR.<#= entity.SetName #>BR.Instance.GetBy(HttpUtility.UrlDecode(filter), pageSize, page, orderBy, orderDir, GetUseMode(), context, extraParams);
            <#= entity.Name #>Model model = null;
            List<<#= entity.Name #>Model> results = new List<<#= entity.Name #>Model>();
            foreach (var item in bos)
            {
                model = new <#= entity.Name #>Model();
				model.Bind(item);
				results.Add(model);
            }
            //return results;
			UIModel<<#= entity.Name #>Model> uiModel = GetContextModel(UIModelContextTypes.Items, null);
            uiModel.Items = results;
			if (Request != null){
				if (SFSdotNet.Framework.Web.Utils.GetRouteDataOrQueryParam(Request.RequestContext, "action") == "Download")
				{
					uiModel.ContextType = UIModelContextTypes.ExportDownload;
				}
			}
            Showing(ref uiModel);
            return uiModel;
		}			
		
		//public List<<#= entity.Name #>Model> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params  object[] extraParams)
        //{
		//	var uiModel = GetByForShow(filter, pageSize, page, orderBy, orderDir, null, extraParams);
        public override List<<#= entity.Name #>Model> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, ContextRequest contextRequest,  params  object[] extraParams)
        {
            var uiModel = GetByForShow(filter, pageSize, page, orderBy, orderDir, contextRequest, extraParams);
           
            return uiModel.Items;
		
        }
		/*
        [MyAuthorize("r", "<#= entity.Name #>", "<#=entity.Model.SafeNamespace#>", typeof(<#= controllerName #>Controller))]
		public ActionResult GetByJson(string filter, int? pageSize, int? page, string orderBy, string orderDir)
        {
<#+ 
	string interfacesModel = "";
	bool isIntegrable = (bool)GetCustomProperty(entity, "Integrable", "Boolean");
	if (isIntegrable){
		interfacesModel = ", SFSdotNet.Framework.Common.Entities.IMyIntegratedEntity";
	}
	if (isIntegrable && entity.Name != "secUser" && entity.Name != "secCompany" ){
 #>            
			if (Request != null) {
                if (!string.IsNullOrEmpty(Request.QueryString["q"])) {
					 if (ContextRequest == null)
						ContextRequest = GetContextRequest();

					var uiModel = GetByForShow(HttpUtility.UrlDecode(filter), pageSize, page, orderBy, orderDir, ContextRequest);

                    var results = SFSdotNet.Framework.Apps.Integration.GetMergedEntitiesItemsForTextSearch(uiModel.Items.ToList<SFSdotNet.Framework.Common.Entities.IMyIntegratedEntity>(), "<#= entity.Name #>", "<#= entity.Model.SafeNamespace #>", Request.QueryString["q"], pageSize, page, orderBy, orderDir, GetContextRequest());
                    return Content(Newtonsoft.Json.JsonConvert.SerializeObject(results));
                }
            }
<#+ } #>
			 return GetByJsonBase(filter, pageSize, page, orderBy, orderDir);
        }*/

		  [MyAuthorize("r", "<#= entity.Name #>", "<#=entity.Model.SafeNamespace#>", typeof(<#= controllerName #>Controller))]
		public ActionResult GetByJson(string filter, int? pageSize, int? page, string orderBy, string orderDir,ContextRequest contextRequest,  object[] extraParams)
        {
			if (contextRequest == null || contextRequest.Company == null || contextRequest.User == null )
            {
                contextRequest = GetContextRequest();
            }
<#+ 

	if (isIntegrable){
		interfacesModel = ", SFSdotNet.Framework.Common.Entities.IMyIntegratedEntity";
	}
	if (isIntegrable && entity.Name != "secUser" && entity.Name != "secCompany" ){
 #>            
			if (Request != null) {
                if (!string.IsNullOrEmpty(Request.QueryString["q"])) {
					 if (ContextRequest == null)
						ContextRequest = GetContextRequest();

					var uiModel = GetByForShow(HttpUtility.UrlDecode(filter), pageSize, page, orderBy, orderDir, ContextRequest);

                    var results = SFSdotNet.Framework.Apps.Integration.GetMergedEntitiesItemsForTextSearch(uiModel.Items.ToList<SFSdotNet.Framework.Common.Entities.IMyIntegratedEntity>(), "<#= entity.Name #>", "<#= entity.Model.SafeNamespace #>", Request.QueryString["q"], pageSize, page, orderBy, orderDir, GetContextRequest());
                    return Content(Newtonsoft.Json.JsonConvert.SerializeObject(results));
                }
            }
<#+ } #>
			 
			 if (this.IsRESTRequest == false)
            {
                return GetByJsonBase(filter, pageSize, page, orderBy, orderDir, contextRequest, extraParams);
            }else
            {
                try
                {
                    return GetByJsonBase(filter, pageSize, page, orderBy, orderDir, contextRequest, extraParams);

                }
                catch (Exception ex)
                {
                    return Json(new { status = "error", reason = "exception", message = ex.ToString() }, JsonRequestBehavior.AllowGet);

                }
            }
        }
/*		  [MyAuthorize("r", "<#= entity.Name #>", "<#=entity.Model.SafeNamespace#>", typeof(<#= controllerName #>Controller))]
       public ActionResult GetByJson(string filter, int? pageSize, int? page, string orderBy, string orderDir, ContextRequest contextRequest, object[] extraParams)
        {
            return GetByJsonBase(filter, pageSize, page, orderBy, orderDir, contextRequest, extraParams);
        }*/
		[MyAuthorize()]
		public ActionResult GetByCount(string filter, ContextRequest contextRequest) {
			if (contextRequest == null || contextRequest.Company == null || contextRequest.User == null )
            {
                contextRequest = GetContextRequest();
            }
           
			
             if (this.IsRESTRequest == true)
            {
                try
                {

                    var result = BR.<#= entity.SetName #>BR.Instance.GetCount(HttpUtility.UrlDecode(filter), GetUseMode(), contextRequest);

                   if (Request.QueryString["v"] == "2")
                    {
						return ResolveApiResponse("success", null, null, result);

                        //return Json(new { status = "success", data = result }, JsonRequestBehavior.AllowGet);
                    }else
                    {
                        return Content(result.ToString());

                    }
                }
                catch (Exception ex)
                {
                  //  return Json(new { status = "error", reason = "exception", message = ex.ToString() }, JsonRequestBehavior.AllowGet);
				  return ResolveApiResponse("error", "exception", ex.ToString(), null);

                }
            }
            else
            {
                var result = BR.<#= entity.SetName #>BR.Instance.GetCount(HttpUtility.UrlDecode(filter), GetUseMode(), contextRequest);
                return Content(result.ToString());
            }
		}
		

		[MyAuthorize("r", "<#= entity.Name #>", "<#=entity.Model.SafeNamespace#>", typeof(<#= controllerName #>Controller))]
        public ActionResult GetByKeyJson(string id, ContextRequest contextRequest,  bool dec = false)
        {
             if (this.IsRESTRequest == true && Request.QueryString["v"] == "2")
            {
                var result =  GetByKey(id, null, contextRequest, dec);
                return ResolveApiResponse("success", null, null, result);
            }
            else
            {
               return  Json(GetByKey(id, null, contextRequest, dec), JsonRequestBehavior.AllowGet);
            }
        }
		public <#= entity.Name #>Model GetByKey(string id) {
			return GetByKey(id, null,null, false);
       	}
		    public <#= entity.Name #>Model GetByKey(string id, string includes)
        {
            return GetByKey(id, includes, false);
        }
		 public  <#= entity.Name #>Model GetByKey(string id, string includes, ContextRequest contextRequest)
        {
            return GetByKey(id, includes, contextRequest, false);
        }
		/*
		  public ActionResult ShowField(string fieldName, string idField) {
		   string safePropertyName = fieldName;
              if (fieldName.StartsWith("Fk"))
              {
                  safePropertyName = fieldName.Substring(2, fieldName.Length - 2);
              }

             <#= entity.Name #>Model model = new  <#= entity.Name #>Model();

            UIModel uiModel = GetUIModel(model, new string[] { "NoField-" });
			
				uiModel.Properties = GetProperties(uiModel, safePropertyName);
		uiModel.Properties.ForEach(p=> p.ContextType = uiModel.ContextType );
            uiModel.ContextType = UIModelContextTypes.FilterFields;
            uiModel.OverrideApp = GetOverrideApp();
            uiModel.UseMode = GetUseMode();

            ViewData["uiModel"] = uiModel;
			var prop = uiModel.Properties.FirstOrDefault(p=>p.PropertyName == safePropertyName);
            //if (prop.IsNavigationProperty && prop.IsNavigationPropertyMany == false)
            //{
            //    ViewData["currentProperty"] = uiModel.Properties.FirstOrDefault(p => p.PropertyName != fieldName + "Text");
            //}else if (prop.IsNavigationProperty == false){
                ViewData["currentProperty"] = prop;
           // }
            ((PropertyDefinition)ViewData["currentProperty"]).RemoveLayout = true;
			ViewData["withContainer"] = false;


            return PartialView("GenericField", model);


        }
      */
	public <#= entity.Name #>Model GetByKey(string id, ContextRequest contextRequest, bool dec)
        {
            return GetByKey(id, null, contextRequest, dec);
        }
        public <#= entity.Name #>Model GetByKey(string id, string  includes, bool dec)
        {
            return GetByKey(id, includes, null, dec);
        }

        public <#= entity.Name #>Model GetByKey(string id, string includes, ContextRequest contextRequest, bool dec) {
		             <#= entity.Name #>Model model = null;
            ControllerEventArgs<<#= entity.Name #>Model> e = null;
			string objectKey = id.Replace("-","/");
             OnGettingByKey(this, e=  new ControllerEventArgs<<#= entity.Name #>Model>() { Id = objectKey  });
             bool cancel = false;
             <#= entity.Name #>Model eItem = null;
             if (e != null)
             {
                 cancel = e.Cancel;
                 eItem = e.Item;
             }
			if (cancel == false && eItem == null)
             {
<#+ 	System.Text.StringBuilder sbQueryKeys = new System.Text.StringBuilder();
		foreach(PropertyInfo property in entity.Properties.Where(p=>p.IsPrimaryKey)){ #>
<#+ 		if (property.Type == "Guid") { #>
			<#= property.Type #> <#= Code.CamelCase(property.Name) #> = Guid.Empty; //new Guid(SFSdotNet.Framework.Entities.Utils.GetPropertyKey(objectKey, "<#= property.Name #>"));
			if (dec)
                 {
                     <#= Code.CamelCase(property.Name) #> = new Guid(id);
                 }
                 else
                 {
                     <#= Code.CamelCase(property.Name) #> = new Guid(SFSdotNet.Framework.Entities.Utils.GetPropertyKey(objectKey, null));
                 }
			
<#+ 		}else{ #>		
			<#= property.Type #> <#= Code.CamelCase(property.Name) #> = Convert.To<#= property.Type #>(SFSdotNet.Framework.Entities.Utils.GetPropertyKey(objectKey, "<#= property.Name #>"));
<#+ 		} #>
<#+ 		if (sbQueryKeys.Length > 0) 
				sbQueryKeys.Append(", ");
			sbQueryKeys.Append(string.Format("{0}", Code.CamelCase(property.Name)));
			#>
<#+ 	} #>            
				model = new <#= entity.Name #>Model();
                  if (contextRequest == null)
                {
                    contextRequest = GetContextRequest();
                }
				var bo = BR.<#= entityPluralName #>BR.Instance.GetByKey(<#= sbQueryKeys.ToString() #>, GetUseMode(), contextRequest,  includes);
				 if (bo != null)
                    model.Bind(bo);
                else
                    return null;
			}
             else {
                 model = eItem;
             }
			model.IsNew = false;

            return model;
        }
        // GET: /<#= entity.SetName #>/DetailsGen/5
		[MyAuthorize("r", "<#= entity.Name #>", "<#=entity.Model.SafeNamespace#>", typeof(<#= controllerName #>Controller))]
        public ActionResult DetailsGen(string id)
        {
			//if (System.Web.SiteMap.CurrentNode != null)
			//	System.Web.SiteMap.CurrentNode.Title = <#= entity.Name #>Resources.ENTITY_PLURAL;
			 #region implementaci�n de m�todo parcial

            bool cancel = false; bool replaceResult = false;
            OnDetailsShowing(this, e = new ControllerEventArgs<<#=entity.Name#>Model>() { Id = id });
            if (e != null)
            {
                if (e.Cancel && e.ActionResult != null)
                    return e.ActionResult;
                else if (e.Cancel == true)
                    cancel = true;
                else if (e.ActionResult != null)
                   return e.ActionResult;
            }
            #endregion



			 bool decripted = false;
            Guid? guidId = null;
            if (System.Web.HttpContext.Current != null && System.Web.HttpContext.Current.Request != null) {
                if (System.Web.HttpContext.Current.Request.QueryString["dec"] == "true") {
                    decripted = true;
                    guidId = Guid.Parse(id);
                }
            }
			//UIModel<<#= entity.Name #>Model> uiModel = GetContextModel(UIModelContextTypes.DisplayForm, GetByKey(id, null, decripted), decripted, guidId);
			var item = GetByKey(id, null, null, decripted);
			if (item == null)
            {
                 RouteValueDictionary rv = new RouteValueDictionary();
                string usemode = SFSdotNet.Framework.Web.Mvc.Utils.GetRouteDataOrQueryParam(this.Request.RequestContext,"usemode");
                string overrideModule = SFSdotNet.Framework.Web.Mvc.Utils.GetRouteDataOrQueryParam(this.Request.RequestContext, "overrideModule");
                string area = SFSdotNet.Framework.Web.Mvc.Utils.GetRouteDataOrQueryParam(this.Request.RequestContext, "area");

                if(!string.IsNullOrEmpty(usemode)){
                    rv.Add("usemode", usemode);
                }
                if(!string.IsNullOrEmpty(overrideModule)){
                    rv.Add("overrideModule", overrideModule);
                }
                if (!string.IsNullOrEmpty(area))
                {
                    rv.Add("area", area);
                }

                return RedirectToAction("Index", rv);
            }
            //
            UIModel<<#= entity.Name #>Model> uiModel = null;
<#+			if ((bool)GetCustomProperty(entity, "Integrable", "Boolean")) { #>
            if (item == null && Request != null && !string.IsNullOrEmpty(Request.QueryString["intDef"]))
            {
                var popupextra = GetRouteData();
                popupextra.Add("id", GetRouteDataOrQueryParam("id"));
                //popupextra.Add("intDef", Request.QueryString["intDef"]);
                return RedirectToAction("CreateGen", popupextra);
            }
            else {
<#+			} #>
                uiModel = GetContextModel(UIModelContextTypes.DisplayForm, item, decripted, guidId);
<#+			if ((bool)GetCustomProperty(entity, "Integrable", "Boolean")) { #>            
            }
<#+			} #>



            MyEventArgs<UIModel<<#= entity.Name #>Model>> me = null;

            OnActionsCreated(this, me = new MyEventArgs<UIModel<<#= entity.Name #>Model>>() { Object = uiModel });

            if (me != null) {
                uiModel = me.Object;
            }
			
            Showing(ref uiModel);
            if(!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["popup"]))
                ViewData["ispopup"] = true;
			
            //return View("DisplayGen", uiModel.Items[0]);
			return ResolveView(uiModel, uiModel.Items[0]);

        }
		[MyAuthorize("r", "<#= entity.Name #>", "<#=entity.Model.SafeNamespace#>", typeof(<#= controllerName #>Controller))]
		public ActionResult DetailsViewGen(string id)
        {

		 bool cancel = false; bool replaceResult = false;
            OnDetailsShowing(this, e = new ControllerEventArgs<<#=entity.Name#>Model>() { Id = id });
            if (e != null)
            {
                if (e.Cancel && e.ActionResult != null)
                    return e.ActionResult;
                else if (e.Cancel == true)
                    cancel = true;
                else if (e.ActionResult != null)
                   return e.ActionResult;
            }
           
			if(!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["popup"]))
                ViewData["ispopup"] = true;
 			if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["fk"]))
                ViewData["fk"] = System.Web.HttpContext.Current.Request.QueryString["fk"];
            if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["fkValue"]))
                ViewData["fkValue"] = System.Web.HttpContext.Current.Request.QueryString["fkValue"];
           
        	 //var uiModel = GetContextModel(UIModelContextTypes.DisplayForm, GetByKey(id));
			 
            bool decripted = false;
            Guid? guidId = null;
            if (System.Web.HttpContext.Current != null && System.Web.HttpContext.Current.Request != null)
            {
                if (System.Web.HttpContext.Current.Request.QueryString["dec"] == "true")
                {
                    decripted = true;
                    guidId = Guid.Parse(id);
                }
            }
            UIModel<<#= entity.Name #>Model> uiModel = GetContextModel(UIModelContextTypes.DisplayForm, GetByKey(id, null, null, decripted), decripted, guidId);
			

            MyEventArgs<UIModel<<#= entity.Name #>Model>> me = null;

            OnActionsCreated(this, me = new MyEventArgs<UIModel<<#= entity.Name #>Model>>() { Object = uiModel });

            if (me != null)
            {
                uiModel = me.Object;
            }
            
            Showing(ref uiModel);
            return ResolveView(uiModel, uiModel.Items[0]);
        
        }
        //
        // GET: /<#= entityPluralName #>/Details/5
        public ActionResult Details(int id)
        {
            return View();
        }
        //
        // GET: /<#= entityPluralName #>/CreateGen
		[MyAuthorize("c", "<#= entity.Name #>", "<#=entity.Model.SafeNamespace#>", typeof(<#= controllerName #>Controller))]
        public ActionResult CreateGen()
        {
			<#= entity.Name #>Model model = new <#= entity.Name #>Model();
            model.IsNew = true;
			 var me = GetContextModel(UIModelContextTypes.EditForm, model);

			OnCreateShowing(this, e = new ControllerEventArgs<<#= entity.Name #>Model>() { Item = model });
   			if (e != null)
            {
                model = e.Item;
                if (e.ActionResult != null)
                    return e.ActionResult;
            }

             if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["popup"]))
                 ViewData["ispopup"] = true;
             if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["fk"]))
                 ViewData["fk"] = System.Web.HttpContext.Current.Request.QueryString["fk"];
             if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["fkValue"]))
                 ViewData["fkValue"] = System.Web.HttpContext.Current.Request.QueryString["fkValue"];

            Showing(ref me);

			return ResolveView(me, me.Items[0]);
        } 
			
		protected override UIModel<<#= entity.Name #>Model> GetContextModel(UIModelContextTypes formMode, <#= entity.Name #>Model model)
        {
            return GetContextModel(formMode, model, false, null);
        }
			
		 private UIModel<<#= entity.Name #>Model> GetContextModel(UIModelContextTypes formMode, <#= entity.Name #>Model model, bool decript, Guid ? id) {
            UIModel<<#= entity.Name #>Model> me = new UIModel<<#= entity.Name #>Model>(true, "<#= entity.SetName #>");
			me.UseMode = GetUseMode();
			me.Controller = this;
			me.OverrideApp = GetOverrideApp();
			me.ContextType = formMode ;
			me.Id = "<#= entity.Name #>";
			
            me.ModuleKey = "<#=entity.Model.SafeNamespace#>";

			me.ModuleNamespace = "<#=entity.Model.Namespace#>";
            me.EntityKey = "<#=entity.Name#>";
            me.EntitySetName = "<#=entity.SetName#>";

			me.AreaAction = "<#=entity.Model.SafeNamespace#>";
            me.ControllerAction = "<#=entity.SetName#>";
<#+ if (!entity.IsCustom && !string.IsNullOrEmpty((string)GetCustomProperty(entity, "UIListFooter", "String"))) { #>
	         
		   me.UIListFooter = "<#=(string)GetCustomProperty(entity, "UIListFooter", "String")#>";

<#+ }
	 if ((bool)GetCustomProperty(entity, "UIHeaderInclude", "Boolean")){ #>           
		   me.HeaderPartialView = "Header" + me.Id;

<#+ }
	var firstPropertyKey = entity.Properties.Where(p=>p.IsPrimaryKey ).FirstOrDefault();

#>
            me.PropertyKeyName = "<#= (firstPropertyKey != null? firstPropertyKey.Name : "")#>";

            me.Properties = GetProperties(me, decript, id);
<#+		if ((bool)GetCustomProperty(entity,"UIShowAutoSave", "Boolean")) { #>   
			me.ShowAutoSave = true;
<#+ } #>
<#+	if (!string.IsNullOrEmpty((String)GetCustomProperty(entity.Model,"AutoUpdatedDateProperty", "String"))){ 
		if (entity.Properties.FirstOrDefault(p=> p.Name == (String)GetCustomProperty(entity.Model,"AutoUpdatedDateProperty", "String")) != null) {#>

			me.SortBy = "<#= (String)GetCustomProperty(entity.Model,"AutoUpdatedDateProperty", "String")  #>";
			me.SortDirection = UIModelSortDirection.DESC;

<#+		}
    }
 #> 			
			if (Request != null)
            {
                string actionName = SFSdotNet.Framework.Web.Mvc.Utils.GetRouteDataOrQueryParam( Request.RequestContext, "action");
                if(actionName != null && actionName.ToLower().Contains("create") ){
                    me.IsNew = true;
                }
            }
			 #region Buttons
			 if (Request != null ){
             if (formMode == UIModelContextTypes.DisplayForm || formMode == UIModelContextTypes.EditForm || formMode == UIModelContextTypes.ListForm)
				me.ActionButtons = GetActionButtons(formMode,model != null ?(Request.QueryString["dec"] == "true" ? model.Id : model.SafeKey)  : null, "<#= entity.Model.SafeNamespace #>", "<#= entity.SetName #>", "<#= entity.Name #>", me.IsNew);

            //me.ActionButtons.Add(new ActionModel() { ActionKey = "return", Title = GlobalMessages.RETURN, Url = System.Web.VirtualPathUtility.ToAbsolute("~/") + "<#= entity.Model.SafeNamespace #>/<#= entity.SetName #>" });
			if (this.HttpContext != null &&  !this.HttpContext.SkipAuthorization){
				//antes this.HttpContext
				me.SetAction("u", (new SFSdotNet.Framework.Globals.Security.Permission()).IsAllowed("u", "<#= entity.Name #>", "<#= entity.Model.SafeNamespace #>"));
				me.SetAction("c", (new SFSdotNet.Framework.Globals.Security.Permission()).IsAllowed("c", "<#= entity.Name #>", "<#= entity.Model.SafeNamespace #>"));
				me.SetAction("d", (new SFSdotNet.Framework.Globals.Security.Permission()).IsAllowed("d", "<#= entity.Name #>", "<#= entity.Model.SafeNamespace #>"));
			
			}else{
				me.SetAction("u", true);
				me.SetAction("c", true);
				me.SetAction("d", true);

			}
            #endregion              
         
            switch (formMode)
            {
                case UIModelContextTypes.DisplayForm:
<#+ if ((bool)GetCustomProperty(entity, "Auditable", "Boolean")) { #> 	
		me.CustomProperties.Add(new CustomProperty () { Name="Auditable", Value = "true" });
    //<li class="pull-right history">
    //    <a href="#tabAuditChangessecUser"  case="history" data-toggle="tab"><i class="icon-time"></i> @GlobalMessages.HISTORY</a>
	//</li>
<#+  } #>
					//me.TitleForm = <#= entity.Name #>Resources.<#= entity.SetName.ToUpper() #>_DETAILS;
                    me.ActionButtons.First(p => p.ActionKey == "u").Title = GlobalMessages.MODIFY_DATA;
					 me.Properties.Where(p=>p.PropertyName  != "Id" && p.IsForeignKey == false).ToList().ForEach(p => p.IsHidden = false);

					 me.Properties.Where(p => (p.SystemProperty != null && p.SystemProperty != SystemProperties.Identifier) ).ToList().ForEach(p=> me.SetHide(p.PropertyName));

<#+					foreach( PropertyInfo property in entity.Properties.Where(p=> (bool)GetCustomProperty(p,"IsHidden", "Boolean"))  ) {
						//if (!string.IsNullOrEmpty((String)GetCustomProperty(entity.Model,"AutoUpdatedDateProperty", "String"))){ 
#>
						me.SetHide("<#= property.Name #>");
<#+						//}
					}	 #>
                    break;
                case UIModelContextTypes.EditForm:
				  me.Properties.Where(p=>p.SystemProperty != SystemProperties.Identifier && p.IsForeignKey == false && p.PropertyName != "Id").ToList().ForEach(p => p.IsHidden = false);
<#+					foreach( PropertyInfo property in entity.Properties.Where(p=> (!string.IsNullOrEmpty((String)GetCustomProperty(p,"Computed", "String")) || !string.IsNullOrEmpty((String)GetCustomProperty(p,"ComputedLinq", "String")))) ) {
						//if (!string.IsNullOrEmpty((String)GetCustomProperty(entity.Model,"AutoUpdatedDateProperty", "String"))){ 
#>

						 me.Properties.Find(p => p.PropertyName == "<#= property.Name #>").IsHidden = true;
<#+						//}
					}	 #>

					if (model != null)
                    {
						

                        me.ActionButtons.First(p => p.ActionKey == "u").Title = GlobalMessages.SAVE_DATA;                        
                        me.ActionButtons.First(p => p.ActionKey == "c").Title = GlobalMessages.SAVE_DATA;
						if (model.IsNew ){
							//me.TitleForm = <#= entity.Name #>Resources.<#= entity.SetName.ToUpper() #>_ADD_NEW;
							me.ActionName = "CreateGen";
							me.Properties.RemoveAll(p => p.SystemProperty != null || (p.IsNavigationPropertyMany && p.NavigationPropertyType != NavigationPropertyTypes.Tags));
<#+			if ((bool)GetCustomProperty(entity, "Integrable", "Boolean")) { #>            

							 if (Request != null && !string.IsNullOrEmpty(Request.QueryString["intDef"]))
                            {
                                //me.TitleForm = "Integrando productor"; //TODO: Refactor

                                Guid idItem = Guid.Parse(SFSdotNet.Framework.Entities.Utils.GetPropertyKey(GetRouteDataOrQueryParam("id").Replace("-","/"), null));
                                Guid idIntegration = Guid.Parse(Request.QueryString["intDef"]);
                                model = (<#= entity.Name #>Model)SFSdotNet.Framework.Apps.Integration.FillIntegratedProperties("<#= entity.Name #>", "<#= entity.Model.SafeNamespace #>", model, idItem, idIntegration, GetContextRequest());
                                //model.Bind(modelEntity);

                            }
<#+			} #>
						}else{
							
							me.ActionName = "EditGen";

							//me.TitleForm = <#= entity.Name #>Resources.<#= entity.SetName.ToUpper() #>_EDIT;
							me.Properties.RemoveAll(p => p.SystemProperty != null && p.SystemProperty != SystemProperties.Identifier || (p.IsNavigationPropertyMany && p.NavigationPropertyType != NavigationPropertyTypes.Tags));	
						}
<#+					if (!string.IsNullOrEmpty((String)GetCustomProperty(entity.Model,"AutoUpdatedDateProperty", "String"))){ #>
						//me.Properties.Remove(me.Properties.Find(p => p.PropertyName == "<#= (String)GetCustomProperty(entity.Model,"AutoUpdatedDateProperty", "String") #>"));
<#+					 } #>
					
					}
                    break;
                case UIModelContextTypes.FilterFields:
                    break;
                case UIModelContextTypes.GenericForm:
                    break;
                case UIModelContextTypes.Items:
				//if (Request.QueryString["allFields"] != "1"){
<#+ string defaultProp = (String)GetCustomProperty(entity.Model,"AutoUpdatedDateProperty", "String");
	if (!string.IsNullOrEmpty(defaultProp) && !string.IsNullOrEmpty(entity.DefaultProperty )) { 

	    foreach(var propNoDefault in entity.Properties.Where(p=>( ((bool)GetCustomProperty(p,"SimpleListVisibility", "Boolean"))  || p.Name == defaultProp || p.Name ==entity.DefaultProperty) ) ) {#>
					 if (me.Properties.Find(p => p.PropertyName == "<#= propNoDefault.Name #>") != null){
						me.Properties.Find(p => p.PropertyName == "<#= propNoDefault.Name #>").IsHidden = false;
					 }
					 
                    
					
<#+     }
	} #>

	<#+  foreach(var propKey in entity.Properties.Where(p=>p.IsPrimaryKey)) { #>
					 if (me.Properties.Find(p => p.PropertyName == "<#= propKey.Name #>") != null){
						me.Properties.Find(p => p.PropertyName == "<#= propKey.Name #>").IsHidden = false;
					 }
					 
                    
					
<#+     } #>


                  


					//}
                    break;
                case UIModelContextTypes.ListForm:
					PropertyDefinition propFinded = null;
					//if (Request.QueryString["allFields"] != "1"){
<#+ 
	if (!string.IsNullOrEmpty(defaultProp) && !string.IsNullOrEmpty(entity.DefaultProperty )) { 

	    foreach(var propNoDefault in entity.Properties.Where(p=>( ((bool)GetCustomProperty(p,"SimpleListVisibility", "Boolean"))  || p.Name == defaultProp || p.Name ==entity.DefaultProperty) ) ) {#>
					 if (me.Properties.Find(p => p.PropertyName == "<#= propNoDefault.Name #>") != null){
						me.Properties.Find(p => p.PropertyName == "<#= propNoDefault.Name #>").IsHidden = false;
					 }
					
<#+     }
	} #>
					me.PrincipalActionName = "GetByJson";
					//}
					//me.TitleForm = <#= entity.Name #>Resources.<#= entity.SetName.ToUpper() #>_LIST;
                    break;
                default:
                    break;
            }
            	this.SetDefaultProperties(me);
			}
			if (model != null )
            	me.Items.Add(model);
            return me;
        }
		// GET: /<#= entityPluralName #>/CreateViewGen
		[MyAuthorize("c", "<#= entity.Name #>", "<#=entity.Model.SafeNamespace#>", typeof(<#= controllerName #>Controller))]
        public ActionResult CreateViewGen()
        {
				<#= entity.Name #>Model model = new <#= entity.Name #>Model();
            model.IsNew = true;
			e= null;
			OnCreateShowing(this, e = new ControllerEventArgs<<#= entity.Name #>Model>() { Item = model });
   			if (e != null)
            {
                model = e.Item;
                if (e.ActionResult != null)
                    return e.ActionResult;
            }
			
            var me = GetContextModel(UIModelContextTypes.EditForm, model);

			me.IsPartialView = true;	
            if(!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["popup"]))
                ViewData["ispopup"] = true;
            if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["fk"]))
            {
                ViewData["fk"] = System.Web.HttpContext.Current.Request.QueryString["fk"];
                me.Properties.Find(p => p.PropertyName == ViewData["fk"].ToString()).IsReadOnly = true;
            }
			if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["fkValue"]))
                ViewData["fkValue"] = System.Web.HttpContext.Current.Request.QueryString["fkValue"];
			
      
            //me.Items.Add(model);
            Showing(ref me);
            return ResolveView(me, me.Items[0]);
        }
		protected override  void GettingExtraData(ref UIModel<<#= entity.Name #>Model> uiModel)
        {

            MyEventArgs<UIModel<<#= entity.Name #>Model>> me = null;
            OnGettingExtraData(this, me = new MyEventArgs<UIModel<<#= entity.Name #>Model>>() { Object = uiModel });
            //bool maybeAnyReplaced = false; 
            if (me != null)
            {
                uiModel = me.Object;
                //maybeAnyReplaced = true;
            }
           
			bool canFill = false;
			 string query = null ;
            bool isFK = false;
			PropertyDefinition prop =null;
			var contextRequest = this.GetContextRequest();
            contextRequest.CustomParams.Add(new CustomParam() { Name="ui", Value= <#= entity.Name #>.EntityName });

            <#+ foreach (var property in entity.Properties.Where(p=>p.IsNavigationProperty && !p.IsNavigationPropertyMany))
                {
					string safeName = property.Name;
	
		
				var entityFKType = entity.NavigationProperties.Find(p=>p.PropertyName == property.Name).EntityType;
				var entityFKName = entityFKType.Split(char.Parse("."))[entityFKType.Split(char.Parse(".")).Length -1];
				var entityFK = entity.Model.Entities.Find(p=>p.Name == entityFKName);
				var keyEntityFK = entityFK.Properties.Find(p=>p.IsPrimaryKey);
				//var propertyFkIsNullable = property.Nullable;
				var entityFKDefaultColumn = entityFK.DefaultProperty?? entityFK.Properties[0].Name;
				
				
				safeName = "Fk"+property.Name; 



				string getAction ="GetBy";	
				string getParams ="query, contextRequest";
				string partialNamespace = "BR";
				string sufix = "BR";
				if (!string.IsNullOrEmpty((string)GetCustomProperty(property, "UIGetParams", "String"))){
					getParams = (string)GetCustomProperty(property, "UIGetParams", "String");
				}else if (!string.IsNullOrEmpty((string)GetCustomProperty(property, "ReusableCatalogKey", "String")) && !string.IsNullOrEmpty((string)GetCustomProperty(entity.Model, "ReusableCatalog", "String"))){
					getParams = "p => p." + (string)GetCustomProperty(entity.Model, "ReusableCatalog", "String") + ".NameKey == \"" + (string)GetCustomProperty(property, "ReusableCatalogKey", "String") + "\"";
				}
				if (!string.IsNullOrEmpty((string)GetCustomProperty(property, "UIGetAction", "String"))){
						partialNamespace = "Web.Mvc.Controllers";
					sufix = "Controller";
						getAction= (string)GetCustomProperty(property, "UIGetAction", "String");
				}else if (!string.IsNullOrEmpty((string)GetCustomProperty(property, "ReusableCatalogKey", "String"))){
					getAction= "GetBy";
				}
				string displayText = entityFKDefaultColumn;
				string displayValue = keyEntityFK.Name;
				if (!string.IsNullOrEmpty((string)GetCustomProperty(property, "UIDisplayText", "String"))){
						displayText= (string)GetCustomProperty(property, "UIDisplayText", "String");
				}
				if (!string.IsNullOrEmpty((string)GetCustomProperty(property, "UIDisplayValue", "String"))){
						displayValue= (string)GetCustomProperty(property, "UIDisplayValue", "String");
				}
				string getWithParams = getAction;
				if (!getAction.Contains("(")){
					getWithParams = getAction + "(" +getParams + ")";
				}



				 #>
			canFill = false;
			 query = "";
            isFK =false;
			prop = uiModel.Properties.FirstOrDefault(p => p.PropertyName == "<#= property.Name #>");
			if (prop != null)
				if (prop.IsHidden == false && (prop.ContextType == UIModelContextTypes.EditForm || prop.ContextType == UIModelContextTypes.FilterFields  || (prop.ContextType == null && uiModel.ContextType == UIModelContextTypes.EditForm)))
				{
					if (prop.NavigationPropertyType == NavigationPropertyTypes.SimpleDropDown )
						canFill = true;
				}
                else if (prop.IsHidden == false && UsingFrom(prop.PropertyName) && !string.IsNullOrEmpty(Request.QueryString["fkValue"]))
                {
                    isFK = true;
                    // es prop FK y se ve
                    //query = "<#=keyEntityFK.Name#> = Guid(\"" + Request.QueryString["fkValue"] + "\")";
                    query = "<#=keyEntityFK.Name#> = @<#=keyEntityFK.Name#>";
					
					canFill = true;
                }
				if (prop.IsHidden == false && UsingFrom(prop.PropertyName) && !string.IsNullOrEmpty(Request.QueryString["fkValue"]))
                {
                    isFK = true;
                    // es prop FK y se ve
                    //query = "<#=keyEntityFK.Name#> = Guid(\"" + Request.QueryString["fkValue"] + "\")";
                    query = "<#=keyEntityFK.Name#> = @<#=keyEntityFK.Name#>";
					canFill = true;
                }
			if (canFill){
			                contextRequest.CustomQuery = new CustomQuery();

				if (!uiModel.ExtraData.Exists(p => p.PropertyName == "<#= property.Name #>")) {
					if (!string.IsNullOrEmpty(query) && !string.IsNullOrEmpty(Request.QueryString["fkValue"]))				  
						contextRequest.CustomQuery.SetParam("<#=keyEntityFK.Name#>", <#= (property.Nullable?"new Nullable<Guid>(Guid.Parse(":"Guid.Parse(") #> Request.QueryString["fkValue"]<#= property.Nullable?"))":")" #>);

<#+			if (!string.IsNullOrEmpty((string)GetCustomProperty(property, "ReusableCatalogKey", "String"))) { #>				
					//uiModel.ExtraData.Add(new ExtraData() { Data = new SelectList((IEnumerable)<#= entity.Model.Namespace #>.BR.<#= entityFK.SetName #>BR.Instance.<#= getWithParams #>, "<#= displayValue #>", "<#= displayText #>"), PropertyName = "<#= property.Name #>" });    
					 var objs<#= property.Name #> = <#= entity.Model.Namespace #>.BR.<#= entityFK.SetName #>BR.Instance.<#= getWithParams #>;

                    List<SelectListItem> selectListItem = new List<SelectListItem>();
                    foreach (var obj in objs<#= property.Name #>)
                    {
                        selectListItem.Add(new SelectListItem() { Value = obj.GuidReusableCatalogValue + "|" + obj.ValueString , Text = obj.Title });
                    }
                    uiModel.ExtraData.Add(new ExtraData() { Data = new SelectList(selectListItem, "Value", "Text"), PropertyName = "<#= property.Name #>" });    
            

<#+			}else{ #>
					 if (isFK == true)
                    {
						uiModel.ExtraData.Add(new ExtraData() { Data = new SelectList((IEnumerable)(new <#= entity.Model.Namespace #>.<#= partialNamespace #>.<#= entityFK.SetName #><#= sufix #>()).<#= getWithParams #>, "<#= displayValue #>", "<#= displayText #>", Request.QueryString["fkValue"]), PropertyName = "<#= property.Name #>" });    
                    }
                    else
                    {

						uiModel.ExtraData.Add(new ExtraData() { Data = new SelectList((IEnumerable)(new <#= entity.Model.Namespace #>.<#= partialNamespace #>.<#= entityFK.SetName #><#= sufix #>()).<#= getWithParams #>, "<#= displayValue #>", "<#= displayText #>"), PropertyName = "<#= property.Name #>" });    

					}
<#+			} #>    if (isFK)
                    {    
						var Fk<#=property.Name#> = ((SelectList)uiModel.ExtraData.First(p => p.PropertyName == "<#=property.Name#>").Data).First();
						uiModel.Items[0].GetType().GetProperty("Fk<#=property.Name#>Text").SetValue(uiModel.Items[0], Fk<#=property.Name#>.Text);
						uiModel.Items[0].GetType().GetProperty("Fk<#=property.Name#>").SetValue(uiModel.Items[0], Guid.Parse(Fk<#=property.Name#>.Value));
                    
					}    
				}
			}
		 
<#+                } #>            

        }
		private void Showing(ref UIModel<<#= entity.Name #>Model> uiModel) {
          	
			MyEventArgs<UIModel<<#= entity.Name #>Model>> me = new MyEventArgs<UIModel<<#= entity.Name #>Model>>() { Object = uiModel };
			 OnVirtualLayoutSettings(this, me);

<#+
				bool removeMoreInfoRelated = (bool)GetCustomProperty(entity.Model, "RemoveMoreInfoRelated", "Boolean");
				if (removeMoreInfoRelated == true ){
				#>
			if (uiModel != null){
				uiModel.RemoveMoreInfoRelated = true;
			}	
<#+				} #>
<#+
				bool removeFilters = (bool)GetCustomProperty(entity.Model, "RemoveFilter", "Boolean");
				if (removeFilters == true ){
				#>
			if (uiModel != null){
				uiModel.RemoveFilter = true;
			}	
<#+				} #>
<#+
				bool removeExport = (bool)GetCustomProperty(entity.Model, "RemoveExport", "Boolean");
				if (removeExport == true ){
				#>
			if (uiModel != null){
				uiModel.RemoveExport = true;
			}	
<#+				} #>

            OnShowing(this, me);

			
			if ((Request != null && Request.QueryString["allFields"] == "1") || Request == null )
			{
				me.Object.Properties.ForEach(p=> p.IsHidden = false);
            }
            if (me != null)
            {
                uiModel = me.Object;
            }
          


			 if (uiModel.ContextType == UIModelContextTypes.EditForm)
			    GettingExtraData(ref uiModel);
<#+ 		if ( entity.Properties.Count( p=> !string.IsNullOrEmpty((string)GetCustomProperty(p, "IsWorkFlowState", "String")) ) > 0 ){
 #>
			 else if(uiModel.ContextType == UIModelContextTypes.DisplayForm || uiModel.ContextType == UIModelContextTypes.ListForm){
				ViewData["IsWorkFlowState"] = true;
			 }
<#+			} #>
            ViewData["UIModel"] = uiModel;

        }
        //
        // POST: /<#= entityPluralName #>/Create
		[MyAuthorize("c", "<#= entity.Name #>", "<#=entity.Model.SafeNamespace#>", typeof(<#= controllerName #>Controller))]
        [HttpPost]
		[ValidateInput(false)] 
        public ActionResult CreateGen(<#= sbExcludes.ToString() #><#= entity.Name #>Model  model,  ContextRequest contextRequest)
        {
			bool isPopUp = false;
            if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.Form["popup"]) || !string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["popup"]))
            {
                isPopUp = true;
            }
		 	e = null;
			this.Validations(model);

            OnValidating(this, e = new ControllerEventArgs<<#= entity.Name #>Model>() { Item = model });
           
		  	if (!ModelState.IsValid) {
				model.IsNew = true;
				var me = GetContextModel(UIModelContextTypes.EditForm, model);
                Showing(ref me);
                 if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["popup"]))
                {
                    if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["popup"]))
                        ViewData["ispopup"] = true;
                    if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["fk"]))
                        ViewData["fk"] = System.Web.HttpContext.Current.Request.QueryString["fk"];
                    if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["fkValue"]))
                        ViewData["fkValue"] = System.Web.HttpContext.Current.Request.QueryString["fkValue"];

                    return ResolveView(me, model);
                }
                else
                    return ResolveView(me, model);
            }
            try
            {
<#+ 		foreach(PropertyInfo property in entity.Properties.Where(p=>p.IsPrimaryKey && p.Type == "Guid" && p.IsIdentity==false)) { #>
				if (model.<#= property.Name #> == null || model.<#= property.Name #>.ToString().Contains("000000000"))
				model.<#= property.Name #> = Guid.NewGuid();
<#+ 		} #>	
				// habilitando m�todo parcial
                #region implementaci�n de m�todo parcial
               
                bool cancel = false; bool replaceResult = false;
                OnCreating(this, e = new ControllerEventArgs<<#= entity.Name #>Model>() { Item = model });
                if (e != null) {
                   if (e.Cancel && e.RedirectValues.Count > 0){
                        RouteValueDictionary rv = new RouteValueDictionary();
                        if (e.RedirectValues["area"] != null ){
                            rv.Add("area", e.RedirectValues["area"].ToString());
                        }
                        foreach (var item in e.RedirectValues.Where(p=>p.Key != "area" && p.Key != "controller" &&  p.Key != "action" ))
	                    {
		                    rv.Add(item.Key, item.Value);
	                    }

                        //if (e.RedirectValues["action"] != null && e.RedirectValues["controller"] != null && e.RedirectValues["area"] != null )
                        return RedirectToAction(e.RedirectValues["action"].ToString(), e.RedirectValues["controller"].ToString(), rv );


                        
                    }else if (e.Cancel && e.ActionResult != null )
                        return e.ActionResult;  
                    else if (e.Cancel == true)
                        cancel = true;
                    else if (e.ActionResult != null)
                        replaceResult = true;
                }
                #endregion
                // si fue implementado el m�todo parcial y no se ha decidido suspender la acci�n
				if (contextRequest == null || contextRequest.Company == null){
					contextRequest = GetContextRequest();
					
				}
                if (!cancel)
                	model.Bind(<#= entityPluralName #>BR.Instance.Create(model.GetBusinessObject(), contextRequest ));
				OnCreated(this, e = new ControllerEventArgs<<#= entity.Name #>Model>() { Item = model });
                 if (this.IsRESTRequest == true)
                {
                    if (Request != null && !string.IsNullOrEmpty(Request.QueryString["rok"]))
                    {
						if (Request.QueryString["resultFormat"] == "json")
                        {
                            return Json("ok", JsonRequestBehavior.AllowGet);
                        }
                        return Content("ok");
                    }
                    else
                    {
                        return ResolveApiResponse("success", null, null, null);

                    }
                }else if (Request != null && !string.IsNullOrEmpty(Request.QueryString["rok"]))
                    {
						if (Request.QueryString["resultFormat"] == "json")
                        {
                            return Json("ok", JsonRequestBehavior.AllowGet);
                        }
                        return Content("ok");

					}
				 
				 if (e != null )
					if (e.ActionResult != null)
                    	replaceResult = true;		
				if (!replaceResult)
                {
                    if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.Form["__continue"]))
                    {
                        ViewData["__continue"] = true;
                    }
					if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.Form["__continue_details"]) &&  string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["ReturnAfter"]))
                    {
                        var popupextra = GetRouteData();
                        popupextra.Add("id", model.SafeKey);
                        string actionDetails = "DetailsGen";
                        if (this.IsPopup())
                       {
                            popupextra.Add("saved", "true");
                            actionDetails = "DetailsViewGen";
                        }
                            popupextra.Add("area", SFSdotNet.Framework.Web.Mvc.Utils.GetRouteDataOrQueryParam(this.Request.RequestContext,"area"));
                            popupextra.Add("controller", SFSdotNet.Framework.Web.Mvc.Utils.GetRouteDataOrQueryParam(this.Request.RequestContext, "controller"));
                            popupextra.Add("action", actionDetails);
                       if (popupextra.ContainsKey("usemode"))
                        {

                            return RedirectToRoute("area_usemode", popupextra);
                        }
                        else
                        {
                            return RedirectToAction(actionDetails, popupextra);
                        }
                    }
                    if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["popup"]) || !string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.Form["popup"]))
                    {
                        if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.Form["__continue"]))

                        {
                            var popupextra = GetRouteData();
                            popupextra.Add("id", model.SafeKey);
                            return RedirectToAction("EditViewGen", popupextra);
                        }
                        else
                        {
                            return PartialView("ResultMessageView", (new MessageModel()).GetDone(GlobalMessages.ADD_DONE));
                        }
                    }        			if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["ReturnAfter"]))
                        return Redirect(System.Web.HttpContext.Current.Request.QueryString["ReturnAfter"]);
                    else{

							RouteValueDictionary popupextra = null; 
							if (Request != null && string.IsNullOrEmpty(Request.QueryString["rok"])){
                            popupextra = GetRouteData();
							 string area = SFSdotNet.Framework.Web.Mvc.Utils.GetRouteDataOrQueryParam(this.Request.RequestContext, "area");
                            if (!string.IsNullOrEmpty(area))
                                popupextra.Add("area", area);
                            
                            if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.Form["__continue"])) {
								popupextra.Add("id", model.SafeKey);
                                return RedirectToAction("EditGen", popupextra);

                            }else{
								
                            return RedirectToAction("Index", popupextra);
							}
							}else{
								return Content("ok");
							}
                        }
						 }
                else {
                    return e.ActionResult;
                    }
				}
            catch(Exception ex)
            {
					  SFSdotNet.Framework.My.EventLog.Exception(ex, GetContextRequest());
                if (this.IsRESTRequest == true)
                {
                    if (Request != null && !string.IsNullOrEmpty(Request.QueryString["rok"]))
                    {
                        throw ex;
                    }
                    else
                    {
                       // return Json(new { status = "error", reason = "exception", message = ex.ToString() }, JsonRequestBehavior.AllowGet);
					   return ResolveApiResponse("error", "exception", ex.ToString(), null);

                    }
                }
                SFSdotNet.Framework.My.Context.CurrentContext.AddMessage(ex.Message, SFSdotNet.Framework.My.MessageResultTypes.Error);
                model.IsNew = true;
                var me = GetContextModel(UIModelContextTypes.EditForm, model, true, model.<#=entity.Properties.FirstOrDefault(p=>p.IsPrimaryKey ).Name#>);
                Showing(ref me);
                if (isPopUp)
                {
                    
                        ViewData["ispopup"] = isPopUp;
                    if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["fk"]))
                        ViewData["fk"] = System.Web.HttpContext.Current.Request.QueryString["fk"];
                    if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["fkValue"]))
                        ViewData["fkValue"] = System.Web.HttpContext.Current.Request.QueryString["fkValue"];

                    return ResolveView(me, model);
                }
                else
					if (Request != null)
						return ResolveView(me, model);
					else
						return Content("ok");
            }
        }        
        //
        // GET: /<#= entityPluralName #>/Edit/5 
        public ActionResult Edit(int id)
        {
            return View();
        }
			
<#+ 
	List<PropertyInfo> propManys = new List<PropertyInfo>();
	foreach (var item in entity.Properties.Where(p=>p.IsNavigationPropertyMany)) { 
		if ( item.Type.Substring(item.Type.LastIndexOf(".") + 1) != entity.Name){
			var navprop = entity.NavigationProperties.FirstOrDefault(p=>p.PropertyName == item.Name);
			var entityRelName = navprop.EntityType.Substring(navprop.EntityType.LastIndexOf(".") + 1);
			var entityRel = entity.Model.Entities.Find(p=>p.Name == entityRelName);
			var relNav = entityRel.NavigationProperties.Where(p=>p.RelationshipName == item.NavigationProperty.RelationshipName).FirstOrDefault();
			if(relNav.Multiplicity == "*"){ // muchos a muchos
				propManys.Add(navprop.Property);
	 		}
		
		}
	}#>
<#+ if (propManys.Count > 0 ) {
	var pmKey = entity.Properties.Where(p=>p.IsPrimaryKey).FirstOrDefault();
 #>		
		public ActionResult AddRelation(string objectKey, string relationship, string relationshipValue) {
			objectKey = SFSdotNet.Framework.Entities.Utils.GetPropertyKey(objectKey.Replace("-", "/"), "<#= pmKey.Name #>");
             UpdateRelations("c", objectKey.Split(char.Parse(",")).ToList(), relationship, relationshipValue);
            return Content("ok");
        }



				
		private void UpdateRelations(string action, List<string> objectIds, string relationship, string relationshipValue){
		<#+ System.Text.StringBuilder sbKey3 = new System.Text.StringBuilder();	
		System.Text.StringBuilder sbKey4 = new System.Text.StringBuilder();	
	foreach(PropertyInfo property in entity.Properties.Where(p=>p.IsPrimaryKey)) { 
		string preConvert = "To";
		if (property.Type == "Guid")
			preConvert = "new Guid";
		else
			preConvert = "Convert.To" + property.Type;
		if (sbKey3.Length > 0)
			sbKey3.Append(", ");
		sbKey3.Append(string.Format("{0} = {1}", property.Name, Code.CamelCase(property.Name)));
		sbKey4.Append(string.Format("{0} = Guid.Parse(objectId)", property.Name));
		
		#>			
				//List<<#= property.Type #>> <#= Code.CamelCase(property.Name) #> = <#= preConvert #>(SFSdotNet.Framework.Entities.Utils.GetPropertyKey(objectKey.Replace("-", "/"), "<#= property.Name #>")); 
<#+ } #> 
            List<BO.<#= entity.Name #>> objs = new List<BO.<#= entity.Name #>>(); 
                //BO.<#= entity.Name #> obj = new BO.<#= entity.Name #>() { <#= sbKey3.ToString() #>  };
			foreach (var objectId in objectIds)
            {
                objs.Add(new <#= entity.Name #>() { <#= sbKey4.ToString() #> });

            }
                
                switch (relationship) {
<#+ 	foreach (var many in propManys) { 
			var entityRel = entity.Model.Entities.FirstOrDefault(p=>p.Name == many.Type.Substring(many.Type.LastIndexOf(".") + 1));
			System.Text.StringBuilder sbKrm = new System.Text.StringBuilder();
			if (entityRel.Properties.First(p=>p.IsPrimaryKey).Type.Contains("Guid")){
				sbKrm.Append(string.Format("{0} = new Guid({1})", entityRel.Properties.First(p=>p.IsPrimaryKey).Name, "relationshipValue"));
			}else{
				sbKrm.Append(string.Format("{0} = Convert.To{1}({2})", entityRel.Properties.First(p=>p.IsPrimaryKey).Name, entityRel.Properties.First(p=>p.IsPrimaryKey).Type, "relationshipValue"));
			
			}
	#>				
					case "<#= many.Name #>":
                    
                    if (action == "c")
                        BR.<#= entityPluralName #>BR.Instance.AddRelations(objs, new BO.<#= entityRel.Name #>() { <#= sbKrm.ToString() #> });
                    else if (action == "d")
                        BR.<#= entityPluralName #>BR.Instance.RemoveRelations(objs, new BO.<#= entityRel.Name #>() { <#= sbKrm.ToString() #> });
					break;
<#+ } #>                
				}
			
        
        }
	
<#+ } #>		
		[MyAuthorize("u", "<#= entity.Name #>", "<#=entity.Model.SafeNamespace#>", typeof(<#= controllerName #>Controller))]
		[MvcSiteMapNode(Area="<#= Model.SafeNamespace #>", Title="sss", Clickable=false, ParentKey = "<#= Model.SafeNamespace #>_<#= entity.Name #>_List")]
		public ActionResult EditGen(string id)
        {
			//if (System.Web.SiteMap.CurrentNode != null)
			//	System.Web.SiteMap.CurrentNode.Title = <#= entity.Name #>Resources.ENTITY_SINGLE;		 	
  // habilitando m�todo parcial
            #region implementaci�n de m�todo parcial

            bool cancel = false; bool replaceResult = false;
            OnEditShowing(this, e = new ControllerEventArgs<<#= entity.Name #>Model>() { Id= id });
            if (e != null)
            {
                if (e.Cancel && e.ActionResult != null)
                    return e.ActionResult;
                else if (e.Cancel == true)
                    cancel = true;
                else if (e.ActionResult != null)
                    replaceResult = true;
            }
            #endregion
            <#= entity.Name #>Model model = null;
            // si fue implementado el m�todo parcial y no se ha decidido suspender la acci�n
			bool dec = false;
            Guid ? idGuidDecripted = null ;
            if (Request != null && Request.QueryString["dec"] == "true")
            {
                dec = true;
                idGuidDecripted = Guid.Parse(id);
            }

            if (!cancel)
                model = GetByKey(id, null, null, dec);
            else
                model = e.Item;
			 var me = GetContextModel(UIModelContextTypes.EditForm, model,dec,idGuidDecripted);
            Showing(ref me);


            if (!replaceResult)
            {
                 //return View("EditGen", me.Items[0]);
				 return ResolveView(me, me.Items[0]);
            }
            else {
                return e.ActionResult;
            }
        }
			[MyAuthorize("u", "<#= entity.Name #>","<#=entity.Model.SafeNamespace#>", typeof(<#= controllerName #>Controller))]
		public ActionResult EditViewGen(string id)
        {
            if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["popup"]))
                ViewData["ispopup"] = true;
			  if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["fk"]))
                ViewData["fk"] = System.Web.HttpContext.Current.Request.QueryString["fk"];
            if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["fkValue"]))
                ViewData["fkValue"] = System.Web.HttpContext.Current.Request.QueryString["fkValue"];

					  // habilitando m�todo parcial
            #region implementaci�n de m�todo parcial

            bool cancel = false; bool replaceResult = false;
            OnEditShowing(this, e = new ControllerEventArgs<<#= entity.Name #>Model>() { Id= id });
            if (e != null)
            {
                if (e.Cancel && e.ActionResult != null)
                    return e.ActionResult;
                else if (e.Cancel == true)
                    cancel = true;
                else if (e.ActionResult != null)
                    replaceResult = true;
            }
            #endregion
			
            <#= entity.Name #>Model model = null;
			 bool dec = false;
            Guid? guidId = null ;

            if (System.Web.HttpContext.Current != null && System.Web.HttpContext.Current.Request != null && System.Web.HttpContext.Current.Request.QueryString["dec"] == "true") {
                dec = true;
                guidId = Guid.Parse(id);
            }
            // si fue implementado el método parcial y no se ha decidido suspender la acción
            if (!cancel)
                model = GetByKey(id, null, null, dec);
            else
                model = e.Item;
            var me = GetContextModel(UIModelContextTypes.EditForm, model, dec, guidId);
            Showing(ref me);

            return ResolveView(me, model);
        }
		[MyAuthorize("u", "<#= entity.Name #>",  "<#=entity.Model.SafeNamespace#>", typeof(<#= controllerName #>Controller))]
		[HttpPost]
		[ValidateInput(false)] 
		<#+

			//string paramSave = "[Bind(Exclude = "FileData")] tvsFileModel model, HttpPostedFileBase FileData";

	#>
        public ActionResult EditGen(<#= entity.Name #>Model model)
        {
			bool isPopUp = false;
            if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.Form["popup"]) || !string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["popup"]))
            {
                isPopUp = true;
            }
			e = null;
			this.Validations(model);

            OnValidating(this, e = new ControllerEventArgs<<#= entity.Name #>Model>() { Item = model });
           
            if (!ModelState.IsValid)
            {
			   	var me = GetContextModel(UIModelContextTypes.EditForm, model);
                Showing(ref me);
			
				if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.Form["popup"])){
                	ViewData["ispopup"] = true;
					return ResolveView(me, model);
				}
				else
					return ResolveView(me, model);
            }
            try
            {
			
				// habilitando m�todo parcial
                #region implementaci�n de m�todo parcial
               
                bool cancel = false; bool replaceResult = false;
                OnEditing(this, e = new ControllerEventArgs<<#= entity.Name #>Model>() { Item = model });
                if (e != null) {
                    if (e.Cancel && e.ActionResult != null)
                        return e.ActionResult;
                    else if (e.Cancel == true)
                        cancel = true;
                    else if (e.ActionResult != null)
                        replaceResult = true;
                }
                #endregion
                // si fue implementado el m�todo parcial y no se ha decidido suspender la acci�n
				ContextRequest context = new ContextRequest();
                context.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;

                <#= entity.Name #> resultObj = null;
			    if (!cancel)
                	resultObj = <#= entity.SetName #>BR.Instance.Update(model.GetBusinessObject(), GetContextRequest());
				
				OnEdited(this, e = new ControllerEventArgs<<#= entity.Name #>Model>() { Item =   new <#= entity.Name #>Model(resultObj) });
				if (this.IsRESTRequest == true)
                {
                    if (Request != null && !string.IsNullOrEmpty(Request.QueryString["rok"]))
                    {
					if (Request.QueryString["resultFormat"] == "json")
                        {
                            return Json("ok", JsonRequestBehavior.AllowGet);
                        }
                        return Content("ok");
                        return Content("ok");
                    }
                    else
                    {
                         return ResolveApiResponse("success", null, null, null);
                    }
                }else if (Request != null && !string.IsNullOrEmpty(Request.QueryString["rok"]))
                    {
						if (Request.QueryString["resultFormat"] == "json")
                        {
                            return Json("ok", JsonRequestBehavior.AllowGet);
                        }
                        return Content("ok");

					}
				
				if (e != null && e.ActionResult != null) replaceResult = true; 

                if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["autosave"]))
                {
                    return Content("ok");
                }
                else
                {
				if (!replaceResult)
                {
					if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.Form["__continue_details"])  && string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["ReturnAfter"]))
                    {
                        var popupextra = GetRouteData();
						 if (Request != null && Request.QueryString["dec"] == "true")
                        {
                            popupextra.Add("id", model.Id);
                        }
                        else
                        {
							popupextra.Add("id", model.SafeKey);

							
                        }
                        string actionDetails = "DetailsGen";
                        if (this.IsPopup())
                        {
                            popupextra.Add("saved", "true");
                            actionDetails = "DetailsViewGen";
                        }
                        popupextra.Add("area", SFSdotNet.Framework.Web.Mvc.Utils.GetRouteDataOrQueryParam(this.Request.RequestContext, "area"));
                        popupextra.Add("controller", SFSdotNet.Framework.Web.Mvc.Utils.GetRouteDataOrQueryParam(this.Request.RequestContext, "controller"));
                        popupextra.Add("action", actionDetails);
                        if (popupextra.ContainsKey("usemode"))
                        {

                            return RedirectToRoute("area_usemode", popupextra);
                        }
                        else
                        {
                            return RedirectToAction(actionDetails, popupextra);
                        }
                    }
					if (isPopUp)
						return PartialView("ResultMessageView", (new MessageModel()).GetDone(GlobalMessages.UPDATE_DONE));
        			    string returnUrl = null;
                    if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.Form["ReturnAfter"]) || !string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["ReturnAfter"])) {
                        if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.Form["ReturnAfter"]))
                            returnUrl = System.Web.HttpContext.Current.Request.Form["ReturnAfter"];
                        else if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["ReturnAfter"]))
                            returnUrl = System.Web.HttpContext.Current.Request.QueryString["ReturnAfter"];
                    }
                    if (!string.IsNullOrEmpty(returnUrl))
                    {
                        return Redirect(returnUrl);
                    }
                    else{
		RouteValueDictionary popupextra = null; 
						 if (Request != null && string.IsNullOrEmpty(Request.QueryString["rok"]))
                            {
							
							popupextra = GetRouteData();
							string area = SFSdotNet.Framework.Web.Mvc.Utils.GetRouteDataOrQueryParam(this.Request.RequestContext, "area");
							if (!string.IsNullOrEmpty(area))
								popupextra.Add("area", area);

							return RedirectToAction("Index", popupextra);
						}else{
							return Content("ok");
						}
						}
				 }
                else {
                    return e.ActionResult;
				}
                }		
            }
          catch(Exception ex)
            {
				SFSdotNet.Framework.My.EventLog.Exception(ex, GetContextRequest());
                if (this.IsRESTRequest == true)
                {
                    if (Request != null && !string.IsNullOrEmpty(Request.QueryString["rok"]))
                    {
                        return Content(ex.ToString());
                    }
                    else
                    {
                        //return Json(new { status = "error", reason = "exception", message = ex.ToString() }, JsonRequestBehavior.AllowGet);
						 return ResolveApiResponse("error", "exception", ex.ToString(), null);

                    }
                }
			    if (isPopUp)
                {
                    return PartialView("ResultMessageView", (new MessageModel()).GetException(ex.Message));
                    
                }
                else
                {
                    SFSdotNet.Framework.My.Context.CurrentContext.AddMessage(ex.Message, SFSdotNet.Framework.My.MessageResultTypes.Error);
                    
                if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["autosave"]))
                {
                    return Json("error", JsonRequestBehavior.AllowGet);
                }
                else {
						  if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["popup"]))
							ViewData["ispopup"] = true;
						if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["fk"]))
							ViewData["fk"] = System.Web.HttpContext.Current.Request.QueryString["fk"];
						if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.QueryString["fkValue"]))
							ViewData["fkValue"] = System.Web.HttpContext.Current.Request.QueryString["fkValue"];

						var me = GetContextModel(UIModelContextTypes.EditForm, model);
						Showing(ref me);

						if (!string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.Form["popup"]))
						{
							ViewData["ispopup"] = true;
							return ResolveView(me, model);
						}
						else
							return ResolveView(me, model);

						
					}
				}
            }
        }
        //
        // POST: /<#= entityPluralName #>/Edit/5
        [HttpPost]
        public ActionResult Edit(int id, FormCollection collection)
        {
            try
            {
                //  Add update logic here
 
                return RedirectToAction("Index");
            }
            catch
            {
                return View();
            }
        }

        //
        // GET: /<#= entityPluralName #>/Delete/5
        
		[MyAuthorize("d", "<#= entity.Name #>", "<#=entity.Model.SafeNamespace#>", typeof(<#= controllerName #>Controller))]
		[HttpDelete]
        public ActionResult DeleteGen(string objectKey, string extraParams)
        {
            try
            {
<#+ if (propManys.Count > 0) { #>			
			if (!string.IsNullOrEmpty(extraParams)) {
                    if (extraParams.Contains("relationship:")) { 
                        // delete many to many 
                        string relationship = extraParams.Split(char.Parse("|")).FirstOrDefault(p=>p.Contains("relationship:")).Split(char.Parse(":"))[1];
                        string relationshipValue = extraParams.Split(char.Parse("|")).FirstOrDefault(p=>p.Contains("relationshipValue:")).Split(char.Parse(":"))[1];

                       UpdateRelations("d", objectKey.Split(char.Parse(",")).ToList(), relationship, relationshipValue);

                        return PartialView("ResultMessageView", (new MessageModel()).GetDone(GlobalMessages.DELETE_DONE));

                    }
                }
<#+ } #>					
<#+ System.Text.StringBuilder sbKey2 = new System.Text.StringBuilder();	
	foreach(PropertyInfo property in entity.Properties.Where(p=>p.IsPrimaryKey)) { 
		string preConvert = "To";
		if (property.Type == "Guid")
			preConvert = "new Guid";
		else
			preConvert = "Convert.To" + property.Type;
		if (sbKey2.Length > 0)
			sbKey2.Append(", ");
		sbKey2.Append(string.Format("{0} = {1}", property.Name, Code.CamelCase(property.Name)));
		#>			
				<#= property.Type #> <#= Code.CamelCase(property.Name) #> = <#= preConvert #>(SFSdotNet.Framework.Entities.Utils.GetPropertyKey(objectKey.Replace("-", "/"), "<#= property.Name #>")); 
<#+ } #>
                BO.<#= entity.Name #> entity = new BO.<#= entity.Name #>() { <#= sbKey2.ToString() #> };

                BR.<#= entity.SetName #>BR.Instance.Delete(entity, GetContextRequest());               
                return PartialView("ResultMessageView", (new MessageModel()).GetDone(GlobalMessages.DELETE_DONE));

            }
            catch(Exception ex)
            {
				SFSdotNet.Framework.My.EventLog.Exception(ex, GetContextRequest());
			    
                if (Request != null && Request.IsAjaxRequest())
                {
                    string message = GlobalMessages.ERROR_TRY_LATER;
                    if (ex.Data["usermessage"] != null)
                    {
                        message = ex.Data["usermessage"].ToString();
                    }

                    return PartialView("ResultMessageView", (new MessageModel()).GetException(message));
                }
                else
                {
                    return View();
                }
            }
        }
		/*[MyAuthorize()]
		public FileMediaResult Download(string query, bool? allSelected = false,  string selected = null , string orderBy = null , string direction = null , string format = null , string actionKey=null )
        {
<#+ 		System.Text.StringBuilder sbKeyArrayParams = new System.Text.StringBuilder();
			int nKey = 0;
			foreach (var itemKey in entity.Properties.Where(p=>p.IsPrimaryKey)) { 
				nKey ++;
				if (sbKeyArrayParams.Length > 0 )
					sbKeyArrayParams.Append(", ");
				sbKeyArrayParams.Append("keysSelected" + nKey.ToString()); #>			
            List<<#= itemKey.Type #>> keysSelected<#= nKey.ToString() #> = new List<<#= itemKey.Type #>>();
            if (!string.IsNullOrEmpty(selected)) {
                foreach (var keyString in selected.Split(char.Parse("|")))
                {
<#+ 	if (itemKey.Type != "String") { #>				
                    keysSelected<#= nKey.ToString() #>.Add(<#= itemKey.Type #>.Parse(keyString));
<#+ 	}else{ #>
                    keysSelected<#= nKey.ToString() #>.Add(keyString);
					
<#+ 	} #>
                }
            }
<#+ } #>				
            query = SFSdotNet.Framework.Web.Mvc.Lists.GetQuery(query, allSelected.Value, selected, "<#= entity.Properties.Where(p=>p.IsPrimaryKey).ToList()[0].Name #>");
            MyEventArgs<ContextActionModel<<#= entity.Name #>Model>> eArgs = null;
            List<<#= entity.Name #>Model> results = GetBy(query, null, null, orderBy, direction, GetContextRequest(), <#= sbKeyArrayParams.ToString() #>);
            OnDownloading(this, eArgs = new MyEventArgs<ContextActionModel<<#= entity.Name #>Model>>() { Object = new ContextActionModel<<#= entity.Name #>Model>() { Query = query, SelectedItems = results, Selected=selected, SelectAll = allSelected.Value, Direction = direction , OrderBy = orderBy, ActionKey=actionKey  } });

            if (eArgs != null)
            {
                if (eArgs.Object.Result != null)
                    return (FileMediaResult)eArgs.Object.Result;
            }
            

            return (new FeaturesController()).ExportDownload(typeof(<#= entity.Name #>Model), results, format, this.GetUIPluralText("<#= entity.Model.SafeNamespace #>", "<#= entity.Name #>"));
            
        }
			*/
		
		[HttpPost]
        public ActionResult CustomActionExecute(ContextActionModel model) {
		 try
            {
<#+ 		 nKey = 1;
			foreach (var propertyKey in entity.Properties.Where(p=>p.IsPrimaryKey )) { 
	#>
			//List<<#= propertyKey.Type #>> keysSelected<#= nKey.ToString() #> = new List<<#= propertyKey.Type #>>();
			List<object> keysSelected<#= nKey.ToString() #> = new List<object>();
<#+ 		nKey ++;
			} #>
            if (!string.IsNullOrEmpty(model.Selected))
            {
                foreach (var keyString in model.Selected.Split(char.Parse(",")))
                {
<#+ 		 nKey = 1;
			System.Text.StringBuilder propertyKeysParams = new System.Text.StringBuilder();
			System.Text.StringBuilder propertyKeyArraysParams = new System.Text.StringBuilder();
			foreach (var propertyKey in entity.Properties.Where(p=>p.IsPrimaryKey )) {
				if (propertyKeysParams.Length > 0)
					propertyKeysParams.Append(",");
				propertyKeysParams.Append(string.Format(@"""{0}""",propertyKey.Name));
				if (propertyKeyArraysParams.Length > 0){
					propertyKeyArraysParams.Append(", ");
				}
				propertyKeyArraysParams.Append("keysSelected" + nKey.ToString());
	#>
<#+ 	if (propertyKey.Type != "String") { #>				
				keysSelected<#= nKey.ToString() #>.Add(<#= propertyKey.Type #>.Parse(keyString.Split(char.Parse("|"))[<#= ((int)(nKey - 1)).ToString() #>]));
<#+ 	}else{ #>
				keysSelected<#= nKey.ToString() #> .Add(keyString.Split(char.Parse("|"))[<#= ((int)(nKey - 1)).ToString() #>]);					
<#+ 	} #>                        
<#+ 		nKey ++;
			} #>                    

			
                }
            }
			DataAction dataAction = DataAction.GetDataAction(Request);
			 model.Selected = dataAction.Selected;

            model.Query = SFSdotNet.Framework.Web.Mvc.Lists.GetQuery(dataAction.Query, dataAction.AllSelected, dataAction.Selected, <#= propertyKeysParams.ToString() #>);
           
            
			
			#region implementaci�n de m�todo parcial
            bool replaceResult = false;
            MyEventArgs<ContextActionModel<<#= entity.Name #>Model>> actionEventArgs = null;
           
			if (model.ActionKey != "deletemany" && model.ActionKey != "deleterelmany" && model.ActionKey != "updateRel" &&  model.ActionKey != "delete-relation-fk" && model.ActionKey != "restore" )
			{
				ContextRequest context = SFSdotNet.Framework.My.Context.BuildContextRequestSafe(System.Web.HttpContext.Current);
				context.UseMode = dataAction.Usemode;

				if (model.IsBackground)
				{
					System.Threading.Tasks.Task.Run(() => 
						OnCustomActionExecutingBackground(this, actionEventArgs = new MyEventArgs<ContextActionModel<<#= entity.Name #>Model>>() { Object = new ContextActionModel<<#= entity.Name #>Model>() { DataAction = dataAction, ContextRequest = context, AllSelected = model.AllSelected, SelectAll = model.AllSelected, IsBackground = model.IsBackground, ActionKey = model.ActionKey, Direction = model.Direction, OrderBy = model.OrderBy, /*SelectedItems = results,*/ SelectedKeys = dataAction.SelectedGuids.Cast<Object>().ToList(), Query = model.Query } })
					);
				}
				else
				{
					OnCustomActionExecuting(this, actionEventArgs = new MyEventArgs<ContextActionModel<<#= entity.Name #>Model>>() {  Object = new ContextActionModel<<#= entity.Name #>Model>() { DataAction = dataAction, ContextRequest = context, AllSelected = model.AllSelected, SelectAll = model.AllSelected, IsBackground = model.IsBackground, ActionKey = model.ActionKey, Direction = model.Direction, OrderBy = model.OrderBy, /*SelectedItems = results,*/ SelectedKeys = dataAction.SelectedGuids.Cast<Object>().ToList(), Query = model.Query } });
				}
			}
            List<<#= entity.Name #>Model> results = null;
	
			if (model.ActionKey == "deletemany") { 
				
				BR.<#= entity.SetName #>BR.Instance.Delete(model.Query, dataAction.SelectedGuids.ToArray(), GetContextRequest());

            }
<#+ if (propManys.Count > 0 ) { #>
			else if (model.ActionKey == "updateRel-mtm" || model.ActionKey == "deleterelmany")
            {
					//results = GetBy(model.Query, null, null, model.OrderBy, model.Direction , dataAction.SelectedGuids.ToArray());
					string valueForUpdate = null;
				   string propForUpdate = null;
				   if (!string.IsNullOrEmpty(Request.Params["propertyForUpdate"])){
						propForUpdate = Request.Params["propertyForUpdate"];
				   }
                   if (!string.IsNullOrEmpty(Request.Params["valueForUpdate"]))
                   {
                       valueForUpdate = Request.Params["valueForUpdate"];
                   }
                    string relationship = null;
                    string relationshipValue = null;

               if (string.IsNullOrEmpty(model.ExtraParams))
                    {
                        relationship = propForUpdate;
                        relationshipValue = valueForUpdate;
                    }
                    else
                    {
                        relationship = model.ExtraParams.Split(char.Parse("|")).FirstOrDefault(p => p.Contains("relationship:")).Split(char.Parse(":"))[1];
                        relationshipValue = model.ExtraParams.Split(char.Parse("|")).FirstOrDefault(p => p.Contains("relationshipValue:")).Split(char.Parse(":"))[1];

                    }

                if (!string.IsNullOrEmpty(relationship) && !string.IsNullOrEmpty(relationshipValue))
                {

               

                        if (model.ActionKey == "updateRel-mtm")
                        {

                            UpdateRelations("c", model.Selected.Split(char.Parse(",")).ToList(), relationship, relationshipValue);
                            return Content("ok");
                        }
                        else
                    {
					            UpdateRelations("d", model.Selected.Split(char.Parse(",")).ToList(), relationship, relationshipValue);

    
                    }
				
				}
				 }
<#+ } #>	
<#+ if (entity.Properties.FirstOrDefault(p=>p.Name == AutoDeletedProperty) != null) {
	 #>
			else if (model.ActionKey == "restore") {
                    BR.<#= entity.SetName #>BR.Instance.UnDelete(model.Query, dataAction.SelectedGuids.ToArray(), GetContextRequest());

                }
<#+		} #>
            else if (model.ActionKey == "updateRel" || model.ActionKey == "delete-relation-fk" || model.ActionKey == "updateRel-proxyMany")
            {
               try {
                   string valueForUpdate = null;
				   string propForUpdate = null;
				   if (!string.IsNullOrEmpty(Request.Params["propertyForUpdate"])){
						propForUpdate = Request.Params["propertyForUpdate"];
				   }
				    if (string.IsNullOrEmpty(propForUpdate) && !string.IsNullOrEmpty(Request.QueryString["propertyForUpdate"]))
                   {
                       propForUpdate = Request.QueryString["propertyForUpdate"];
                   }
                    if (model.ActionKey != "delete-relation-fk")
                    {
                        valueForUpdate = Request.QueryString["valueForUpdate"];
                    }
                    BR.<#= entity.SetName #>BR.Instance.UpdateAssociation(propForUpdate, valueForUpdate, model.Query, dataAction.SelectedGuids.ToArray(), GetContextRequest());
					
                    if (model.ActionKey == "delete-relation-fk")
                    {
                        MessageModel message = (new MessageModel()).GetDone(GlobalMessages.DONE, Request.Form["lastActionName"]);

                        return PartialView("ResultMessageView", message);
                    }
                    else
                    {
                        return Content("ok");
                    }
       
          
                }
                catch (Exception ex)
                {
				        SFSdotNet.Framework.My.EventLog.Exception(ex, GetContextRequest());
           
                }
            
            }
		
                if (actionEventArgs == null && !model.IsBackground)
                {
                    //if (model.ActionKey != "deletemany"  && model.ActionKey != "deleterelmany")
                    //{
                     //   throw new NotImplementedException("");
                    //}
                }
                else
                {
					if (model.IsBackground == false )
						 replaceResult = actionEventArgs.Object.Result is ActionResult /*actionEventArgs.Object.ReplaceResult*/;
                }
                #endregion
                if (!replaceResult)
                {
                    if (Request != null && Request.IsAjaxRequest())
                    {
						MessageModel message = (new MessageModel()).GetDone(GlobalMessages.DONE, Request.Form["lastActionName"]) ;
                        if (model.IsBackground )
                            message.Message = GlobalMessages.THE_PROCESS_HAS_BEEN_STARTED;
                        
                        return PartialView("ResultMessageView", message);                    
					}
                    else
                    {
                        return View();
                    }
                }
                else
                {
                    return (ActionResult)actionEventArgs.Object.Result;
                }
            }
            catch (Exception ex)
            {
				SFSdotNet.Framework.My.EventLog.Exception(ex, GetContextRequest());
			    
                if (Request != null && Request.IsAjaxRequest())
                {
                    string message = GlobalMessages.ERROR_TRY_LATER;
                    if (ex.Data["usermessage"] != null) {
                        message = ex.Data["usermessage"].ToString();
                    }
					 SFSdotNet.Framework.My.EventLog.Exception(ex, GetContextRequest());
                    return PartialView("ResultMessageView", (new MessageModel()).GetException(message));
                }
                else
                {
                    return View();
                }

            }
        }
        //
        // POST: /<#= entityPluralName #>/Delete/5
        
			
	
    }
}
<#+
	
	}catch(Exception ex){
		throw new Exception(string.Format("El error ocurri� en la entidad {0}",entity.Name),ex);
	}
	}
}
#>
